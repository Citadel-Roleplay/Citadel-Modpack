after_war_election = {
	save_scope_as = current_ruler
	# We check to see if you are still in a war or not
	trigger_event = { id = free_city_events.1010 days = 1 }
}

check_for_free_city_election = {
	if = {
		limit = {
			has_variable = years_since_election
			NOT = {
				holder = { has_realm_law = term_length_life }
			}
		}
		change_variable = {
			name = years_since_election
			add = 1
		}
	}
	else = {
		set_variable = {
			name = years_since_election
			value = 1
		}
	}
	if = {
		limit = {
			NOT = {
				holder = { has_realm_law = term_length_life }
			}
			NOT = { has_title_law = dictatorship_succession_law }
			NOT = { free_city_term_length = -1 } #historical life term
			var:years_since_election >= free_city_term_length
		}
		pre_magisterial_succession = yes
	}
}

pre_magisterial_succession = { # Sets up scopes
	if = {
		limit = { has_variable = years_since_election }
		remove_variable = years_since_election
		set_variable = {
			name = years_since_election
			value = 0
		}
	}
	if = {
		limit = { # if holder is dead
			trigger_if = { # is_alive not work when on_death trigger this
				limit = {
					exists = scope:dead_holder
				}
				holder = scope:dead_holder
			}
			trigger_else = {
				always = no
			}
		}
		scope:dead_holder = { end_diarchy = yes }
		if = {
			limit = {
				holder = { has_character_flag = election_delayed_till_war_ends }
			}
			remove_character_flag = election_delayed_till_war_ends
		}
		save_scope_as = term_limit_country # Saves title being changed
		scope:term_limit_country = {
			ordered_title_heir = {
				order_by = "appointment_candidate_score(prev)"
				save_scope_as = magister_winner
			}
			ordered_title_heir = {
				order_by = "appointment_candidate_score(prev)"
				limit = {
					NOT = { this = scope:magister_winner }
				}
				save_scope_as = future_diarch
			}
		}
		scope:term_limit_country.holder = { save_scope_as = old_holder } # Saves the current holder as a scope
		scope:old_holder = {
			every_tributary = {
				add_to_list = tributaries_death_reroll
				end_tributary = yes
			}
		}
		magisterial_succession = yes # Triggers actual succession
	}
	else = { # if holder alive
		if = {
			limit = {
				holder = {
					# Being at war should prevent the election from happening
					is_at_war = no
				}
			}
			holder = { end_diarchy = yes }
			if = {
				limit = {
					holder = { has_character_flag = election_delayed_till_war_ends }
				}
				remove_character_flag = election_delayed_till_war_ends
			}
			save_scope_as = term_limit_country # Saves title being changed
			scope:term_limit_country = {
				ordered_title_heir = {
					order_by = "appointment_candidate_score(prev)"
					save_scope_as = magister_winner
				}
				ordered_title_heir = {
					order_by = "appointment_candidate_score(prev)"
					limit = {
						NOT = { this = scope:magister_winner }
					}
					save_scope_as = future_diarch
				}
			}
			scope:term_limit_country.holder = { save_scope_as = old_holder } # Saves the current holder as a scope
			scope:magister_winner = {
				add_character_flag = titles_should_transfer_manually
			}
			holder = {
				trigger_event = free_city_events.9999
				every_vassal = { # Event shows up for the electors
					limit = {
						NOT = {
							this = scope:old_holder
						}
					}
					trigger_event = free_city_events.9999
				}
			}
			magisterial_succession = yes # Triggers actual succession
		}
		else_if = {
			limit = {
				holder = {
					# Being at war should prevent the election from happening
					is_at_war = yes
				}
			}
			holder = {
				save_scope_as = current_ruler
				random_primary_war_enemy = {
					save_scope_as = war_enemy
				}
				add_character_flag = election_delayed_till_war_ends
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = free_city_events.1001.war_delayed_due_to_war_tt
					left_icon = root
				}
				trigger_event = free_city_events.1001
			}
		}
	}
}

magisterial_succession = { # Actually ends the terms
	if = {
		limit = { #only necessary if holder is still alive
			NOT = { exists = scope:dead_holder }
		}
		scope:magister_winner = {
			add_character_flag = {
				flag = transferring_title
				days = 10
			}

			scope:term_limit_country = {
				every_in_list = {
					variable = personal_vassals
					add_to_list = old_personal_vassals
				}
				clear_variable_list = personal_vassals
			}

			every_vassal = {
				every_held_title = {
					limit = { tier >= tier_county }
					scope:term_limit_country = {
						add_to_variable_list = {
							name = personal_vassals
							target = prev
						}
					}
				}
			}
		}

		if = {
			limit = {
				scope:term_limit_country.holder = { has_realm_law = free_city_election_succession_law }
			}

			create_title_and_vassal_change = {
				type = election
				save_scope_as = title_change
				add_claim_on_loss = no
			}

			if = {
				limit = {
					scope:magister_winner = {
						has_character_flag = titles_should_transfer_manually
					}
				}
				scope:term_limit_country = {
					change_title_holder = {
						holder = scope:magister_winner
						change = scope:title_change
					}
				}
				scope:magister_winner = {
					remove_character_flag = titles_should_transfer_manually
				}
			}
			else = {  # fake title history action
				show_as_tooltip = {
					scope:term_limit_country = {
						change_title_holder = {
							holder = scope:magister_winner
							change = scope:title_change
						}
					}
				}
				hidden_effect = {
					create_dynamic_title = {
						tier = duchy
						name = d_dummy_title
					}
					create_title_and_vassal_change = {
						type = election
						save_scope_as = fake_title_change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_capital_county = title:c_myr
						set_landless_title = yes
						set_delete_on_destroy = yes
						copy_title_history = scope:term_limit_country
						change_title_holder = {
							holder = scope:magister_winner
							change = scope:fake_title_change
						}
						save_scope_as = fake_title
					}
					resolve_title_and_vassal_change = scope:fake_title_change
					scope:magister_winner = {
						trigger_event = { # Must trigger it after a day otherwise title history will mix
							id = free_city_events.1011
							days = 1
						}
					}
				}
			}

			if = {
				limit = {
					OR = {
						scope:term_limit_country.title_capital_county = { has_title_law = magisterial_attached_titles_law }
						scope:term_limit_country.title_capital_county.duchy = { has_title_law = magisterial_attached_titles_law }
					}
				}

				if = {
					limit = {
						scope:term_limit_country.title_capital_county = { has_title_law = magisterial_attached_titles_law }
					}
					scope:term_limit_country.title_capital_county = {
						change_title_holder = {
							holder = scope:magister_winner
							change = scope:title_change
						}
					}
					scope:term_limit_country.title_capital_county = { save_scope_as = the_capital }
				}
				if = {
					limit = {
						scope:term_limit_country.title_capital_county.duchy = { has_title_law = magisterial_attached_titles_law }
					}
					scope:term_limit_country.title_capital_county.duchy = {
						change_title_holder = {
							holder = scope:magister_winner
							change = scope:title_change
						}
					}
				}
			}

			resolve_title_and_vassal_change = scope:title_change

			create_title_and_vassal_change = { # Vassals of Kingdom Swear to Kingdom
				type = swear_fealty
				save_scope_as = vassal_change
			}

			scope:old_holder = {
				every_vassal = {
					limit = {
						primary_title = {
							NOT = { is_in_list = old_personal_vassals }
						}
						NOT = {
							this = scope:magister_winner
						}
					}
					change_liege = {
						liege = scope:magister_winner
						change = scope:vassal_change
					}
				}
				hidden_effect = {
					every_tributary = {
						add_to_list = tributaries_reroll
						end_tributary = yes
					}
				}
			}
			every_in_list = {
				list = tributaries_reroll
				start_tributary = { contract_group = tributary_subjugated suzerain = scope:magister_winner }
				add_truce_both_ways = {
					character = scope:magister_winner
					years = 5
					name = TRUCE_TRIBUTARY
				}
			}
			resolve_title_and_vassal_change = scope:vassal_change

			if = {
				limit = { scope:old_holder.highest_held_title_tier < scope:magister_winner.highest_held_title_tier }
				create_title_and_vassal_change = { # Ensure that the old holder becomes the vassal of the new one
					type = swear_fealty
					save_scope_as = change
				}
				scope:old_holder = {
					change_liege = {
						liege = scope:magister_winner
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}


			scope:term_limit_country = {
				if = {
					limit = { exists = scope:the_capital }
					set_capital_county = scope:the_capital
				}
			}

			scope:magister_winner = {
				change_government = administrative_government #AGOT FreeCityPlaceholder
				if = {
					limit = {
						NOT = {
							scope:term_limit_country.holder = { has_realm_law = free_city_election_succession_law }
						}
					}
					scope:term_limit_country.holder = { add_realm_law = free_city_election_succession_law }
				}
			}
		}

		#other vassals
		if = {
			limit = {
				NOT = {
					scope:future_diarch = {
						is_vassal_of = scope:magister_winner
					}
				}
			}
			scope:magister_winner = {
				random_powerful_vassal ={
					limit = { is_adult = yes }
					save_scope_as = future_diarch
				}
			}
		}

		if = {
			limit = {
				scope:magister_winner.primary_title = title:k_lys
			}
			scope:magister_winner = {
				designate_diarch = scope:future_diarch
				try_start_diarchy = second_magister
				set_diarchy_swing = 40
			}
		}
		else_if = {
			limit = {
				OR = {
					scope:magister_winner.primary_title = title:k_tyrosh
					scope:magister_winner.primary_title = title:k_pentos
				}
			}
			scope:magister_winner = {
				designate_diarch = scope:future_diarch
				try_start_diarchy = high_councilor
				set_diarchy_swing = 40
			}
		}
		else_if = {
			limit = {
				scope:magister_winner.primary_title = title:k_myr
			}
			scope:magister_winner = {
				designate_diarch = scope:future_diarch
				try_start_diarchy = tyniate
				set_diarchy_swing = 40
			}
		}
		else = {
			scope:magister_winner = {
				designate_diarch = scope:future_diarch
				try_start_diarchy = gonfaloniere
				set_diarchy_swing = 40
			}
		}
		if = {
			limit = {
				exists = global_var:three_daughters_confederation
				OR = {
					scope:magister_winner.primary_title = title:k_myr
					scope:magister_winner.primary_title = title:k_tyrosh
					scope:magister_winner.primary_title = title:k_lys
				}
			}
			global_var:three_daughters_confederation = {
				add_confederation_member = scope:magister_winner
			}
		}
	}

	else = {  # holder died, only handle new diarchy.
		scope:magister_winner = {
			trigger_event = { id = free_city_events.9997 days = 1 } # Used to rejoin the 3Daughters Confederation b/c of on_death. This makes an edge case where if all three leaders die at once..
			trigger_event = { id = free_city_events.9998 days = 3 }  # this is triggered by on_death, so: Delay to wait for title inheritance and vanilla dissolving of old diarchy
		}
	}
}

notify_electors = { # Just sends notification of one year till election
	save_scope_as = election_title
	holder ?= { save_scope_as = cur_holder }
}

create_triarchy = {
	get_title = title:e_three_daughters
	create_title_and_vassal_change = { # Swears all the daughters to the new empire title
		type = swear_fealty
		save_scope_as = change
	}
	scope:archon_tyrosh = {
		if  = {
			limit = {
				NOT = {
					this = scope:request_sender
				}
			}
			change_liege = {
				liege = scope:request_sender
				change = scope:change
			}
		}
	}
	scope:first_magister_lys = {
		if  = {
			limit = {
				NOT = {
					this = scope:request_sender
				}
			}
			change_liege = {
				liege = scope:request_sender
				change = scope:change
			}
		}
	}
	scope:first_magister_myr = {
		if  = {
			limit = {
				NOT = {
					this = scope:request_sender
				}
			}
			change_liege = {
				liege = scope:request_sender
				change = scope:change
			}
		}
	}
	resolve_title_and_vassal_change = scope:change
	change_government = administrative_government #AGOT FreeCityPlaceholder
	title:e_three_daughters = { add_title_law = equal_law }
	add_realm_law = free_city_election_succession_law
	trigger_event = {
		on_action = free_city_term_empire
		years = 10
	}
	generate_high_council_three_daughters = yes # Creates lists of 10 magisters for each city. Combined with the leader, it makes 11 magisters per city
}

generate_high_council_three_daughters = {
	clear_global_variable_list = all_triarchy_magisters
	scope:archon_tyrosh = {
		generate_list_magisters = { CITY = tyrosh }
	}
	scope:first_magister_lys = {
		generate_list_magisters = { CITY = lys }
	}
	scope:first_magister_myr = {
		generate_list_magisters = { CITY = myr }
	}
	clean_up_magister_list = { CITY = tyrosh }
	clean_up_magister_list = { CITY = lys }
	clean_up_magister_list = { CITY = myr }
}

generate_list_magisters = { # Adds all eligible candidates to the list
	clear_global_variable_list = $CITY$_magisters # Clears out old one just in case
	save_scope_as = thisguy
	add_to_global_variable_list = {
		name = all_triarchy_magisters
		target = scope:thisguy
	}
	every_vassal = {
		limit = { government_has_flag = government_is_free_city }
		save_scope_as = magister_for_council
		add_to_global_variable_list = {
			name = $CITY$_magisters
			target = scope:magister_for_council
		}
		add_to_global_variable_list = {
			name = all_triarchy_magisters
			target = scope:magister_for_council
		}
	}
	every_courtier = {
		limit = { age >= 18 }
		save_scope_as = magister_for_council
		add_to_global_variable_list = {
			name = $CITY$_magisters
			target = scope:magister_for_council
		}
		add_to_global_variable_list = {
			name = all_triarchy_magisters
			target = scope:magister_for_council
		}
	}
}

clean_up_magister_list = { # The prunes the list
	while = {
		limit = { global_variable_list_size = { name = $CITY$_magisters value > 10 } }
		ordered_in_global_list = {
			variable = $CITY$_magisters
			order_by = reverse_gold
			position = 0
			save_scope_as = remove_magister
			remove_list_global_variable = { name = $CITY$_magisters target = scope:remove_magister }
			remove_list_global_variable = { name = all_triarchy_magisters target = scope:remove_magister }
		}
	}
}