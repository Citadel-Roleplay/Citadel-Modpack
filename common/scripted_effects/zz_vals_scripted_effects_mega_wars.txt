

### Mega War setup ###

agot_mw_war_started_setup_effect = {
	if = {
		limit = { 
			agot_mw_is_valid_to_happen = { ATTACKER = scope:attacker DEFENDER = scope:defender } 
			scope:war = {
				NOT = { using_cb = val_reconquest_war }
			}
		}

		save_scope_value_as = { name = mw_start_up value = flag:yes }
		scope:attacker = { # used for tyranny war
			if = {
				limit = { has_variable = mw_allow_mega_war }
				remove_variable = mw_allow_mega_war
			}
		}

		## Set CROWN and REBEL_LEADER
		# Usually the defender should be CROWN
		if = { # fetch proper scope for attacker
			limit = { # If attacker is a conqueror he must be crown!
				scope:attacker = { always = no agot_mw_is_external_war_trigger = yes } # AGOT TODO disabled for now since it is causing issues and I don't really think we should do it like that.
			}
			scope:attacker = {
				save_scope_as = mw_crown
			}
			scope:defender = {
				save_scope_as = mw_rebel_leader
			}
		}
		else_if = { # fetch proper scope for defender
			limit = { # Further triggers needed, basic trigger schould suffice for now
				scope:defender = { agot_mw_is_empire_tier_ruler = yes }
				#NOT = { scope:attacker = { agot_mw_is_empire_tier_ruler = yes } } # Needed later
			}
			scope:attacker = {
				save_scope_as = mw_rebel_leader
			}
			scope:defender = {
				save_scope_as = mw_crown
			}
		}
		else_if = { # fetch proper scope for attacker
			limit = { # Further triggers needed, basic trigger schould suffice for now
				scope:attacker = { agot_mw_is_empire_tier_ruler = yes }
				#NOT = { scope:defender = { agot_mw_is_empire_tier_ruler = yes } } # Needed later
			}
			scope:attacker = {
				save_scope_as = mw_crown
			}
			scope:defender = {
				save_scope_as = mw_rebel_leader
			}
		}

		######
		scope:mw_crown = { # basic crown setup
			if = {
				limit = { NOT = { agot_mw_crown_trigger = yes } }
				create_story = {
					type = story_agot_mw_crown
					save_scope_as = mw_crown_story
				}
			}
			else = {
				random_owned_story = {
					limit = { story_type = story_agot_mw_crown }
					set_variable = {
						name	= mw_status
						value	= flag:initialized
					}
					save_scope_as = mw_crown_story
				}
			}
			scope:mw_crown_story = {
				set_variable = { name = mw_title value = scope:mw_crown.primary_title }
				add_to_variable_list = {
					name = mw_wars
					target = scope:war
				}
				add_to_variable_list = {
					name = mw_rebel_leader_list
					target = scope:mw_rebel_leader
				}
				remove_list_variable = { name = mw_loyalist_list target = scope:mw_rebel_leader }
				remove_list_variable = { name = mw_neutral_list target = scope:mw_rebel_leader }

				if = {
					limit = { has_variable_list = mw_independence_rebel_leader_list }

					every_in_list = {
						variable = mw_independence_rebel_leader_list
						limit = {
							is_independent_ruler = no # DON'T CHANGE THIS TO agot_is_independent_ruler!
							NOT = { this = scope:mw_independence_rebel_leader }
						}

						add_to_list = mw_temp_independence_list
					}
				}
			}
		}
		scope:mw_rebel_leader = { # basic rebel leader setup
			create_story = {
				type = story_agot_mw_rebel
				save_scope_as = mw_rebel_story
			}
			scope:mw_rebel_story = {
				if = {
					limit = { story_owner = { agot_mw_is_external_war_trigger = yes } }
					set_variable = { name = mw_mode value = flag:mw_external }
				}
				else = {
					set_variable = { name = mw_mode value = flag:mw_internal }
				}
				if = {
					limit = { story_owner = { agot_mw_rebel_may_vassalize_trigger = yes } }
					set_variable = { name = mw_rebel_may_vassalize value = yes }
				}
				else = {
					set_variable = { name = mw_rebel_may_vassalize value = no }
				}
				add_to_variable_list = {
					name = mw_wars
					target = scope:war
				}
				set_variable = { name = rebel_war value = scope:war }
				set_variable = { name = mw_target value = scope:mw_crown }
				scope:war = {
					switch = {
						trigger = using_cb
						claim_cb = { scope:mw_rebel_story = { set_variable = { name = mw_war_cb value = flag:claim_cb } } }
						agot_independence_war = { scope:mw_rebel_story = { set_variable = { name = mw_war_cb value = flag:independence_war } } }
					}
				}
			}

			# Add independence rebel supporters to rebel supporter list
			if = {
				limit = { has_variable_list = mw_independence_rebels_list }

				every_in_list = {
					variable = mw_independence_rebels_list

					save_temporary_scope_as = mw_temp_rebel_scope

					agot_mw_join_rebels_effect = { RULER = scope:mw_temp_rebel_scope REBEL_LEADER = scope:mw_rebel_leader }
				}
				clear_variable_list = mw_independence_rebels_list
			}

			# Make leader and faction members independent if aren't already
			if = {
				limit = { has_variable_list = mw_make_independent_list }

				every_in_list = {
					variable = mw_make_independent_list

					limit = {
						is_independent_ruler = no # DON'T CHANGE THIS TO agot_is_independent_ruler!
						NOT = { this = scope:mw_rebel_leader }
					}

					add_to_list = mw_temp_independence_list
				}
				clear_variable_list = mw_make_independent_list
			}
			if = { # add rebel leader to mw_temp_independence_list if no independent already
				limit = { is_independent_ruler = no } # DON'T CHANGE THIS TO agot_is_independent_ruler!

				add_to_list = mw_temp_independence_list
			}
		}
		if = {
			limit = {
				#scope:mw_rebel_story.var:mw_mode = flag:mw_internal # if it is a conquest war, crown side may NOT choose sides # AGOT TODO; disabled for now
				always = yes # Crown realm may always choose sides
			}

			scope:mw_crown = {
				# Add realm to mw_participants list
				every_vassal_or_below = {
					limit = {
						highest_held_title_tier > tier_barony
						NOR = {
							this = scope:mw_rebel_leader
							#agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_loyalist_list TARGET = scope:this_scope }
							has_title = title:k_the_most_devout
							has_title = title:d_kingsguard
							#AND = {
							#	scope:mw_crown_story = { is_target_in_variable_list = { name = mw_loyalist_list target = prev } }
							#	trigger_if = {
							#		limit = { has_variable = mw_is_loyal_to }
							#		NOT = { var:mw_is_loyal_to = scope:mw_rebel_leader }
							#	}
							#}
						}
					}

					scope:mw_crown_story = { add_to_variable_list = { name = mw_participants target = prev } }
				}

				if = {
					limit = {
						any_character_war = {
							NOT = { this = scope:war }
							any_war_participant = {
								this = scope:mw_rebel_leader
							}
						}
					}
					every_character_war = {
						limit = {
							NOT = { this = scope:war }
							any_war_participant = {
								this = scope:mw_rebel_leader
							}
						}
						remove_participant = scope:mw_rebel_leader
					}
				}
			}
		}

		if = {
			limit = {
				scope:mw_rebel_story.var:mw_mode = flag:mw_external
				always = no
			}

			scope:mw_rebel_leader = {
				if = {
					limit = {
						is_independent_ruler = yes
						NOT = { has_variable = pre_war_liege }
					}

					# Add realm to mw_participants list
					every_vassal_or_below = {
						limit = {
							highest_held_title_tier > tier_barony
							NOR = {
								this = scope:mw_rebel_leader
								#agot_mw_in_LIST_of_trigger = { STORY_OWNER = scope:mw_crown TYPE = crown LIST_NAME = mw_loyalist_list TARGET = scope:this_scope }
								has_title = title:k_the_most_devout
								has_title = title:d_kingsguard
								#AND = {
								#	scope:mw_crown_story = { is_target_in_variable_list = { name = mw_loyalist_list target = prev } }
								#	trigger_if = {
								#		limit = { has_variable = mw_is_loyal_to }
								#		NOT = { var:mw_is_loyal_to = scope:mw_rebel_leader }
								#	}
								#}
							}
						}

						scope:mw_crown_story = { add_to_variable_list = { name = mw_participants target = prev } }
					}
				}
			}
		}

		# Add temporarily independent rulers to mw_participants list
		every_independent_ruler = {
			limit = {
				has_variable = pre_war_liege
				var:pre_war_liege ?= scope:mw_crown
				NOT = { has_title = title:k_the_most_devout }
				NOT = { has_title = title:d_kingsguard }
			}
			if = {
				limit = {
					NOT = { this = scope:mw_rebel_leader }
					scope:mw_crown_story = { is_target_in_variable_list = { name = mw_neutral_list target = prev } }
				}

				scope:mw_crown_story = { add_to_variable_list = { name = mw_participants target = prev } }
			}
			else_if = {
				limit = { this = scope:mw_rebel_leader }

				every_vassal_or_below = {
					scope:mw_crown_story = { add_to_variable_list = { name = mw_participants target = prev } }
				}
			}
		}

		# Move former faction members to rebel story
		scope:mw_rebel_leader = {
			if = {
				limit = { has_variable_list = mw_faction_members_list }

				every_in_list = {
					variable = mw_faction_members_list

					scope:mw_rebel_story = {
						add_to_variable_list = {
							name = mw_faction_members_list
							target = prev
						}
					}
				}
				clear_variable_list = mw_faction_members_list
			}
		}

		# Make rebel_leader(s) independent
		every_in_list = {
			list = mw_temp_independence_list

			agot_mw_set_pre_war_liege = yes
			agot_mw_become_independent = yes
		}

		# Split mw_participants list members into 3 (4) levels and fire event 0002
		scope:mw_crown_story = {
			every_in_list = {
				variable = mw_participants

				if = {
					limit = {
						has_variable = pre_war_liege
						OR = {
							liege ?= var:pre_war_liege
							this ?= var:pre_war_liege
						}
					}

					remove_variable = pre_war_liege
				}

				if = { # Level 1; direct vassals of crown or rebel leader
					limit = {
						OR = {
							liege = scope:mw_crown
							var:pre_war_liege ?= scope:mw_crown
							#liege.var:pre_war_liege ?= scope:mw_crown
							trigger_if = {
								limit = { scope:mw_rebel_story.var:mw_mode = flag:mw_external }
								OR = {
									liege = scope:mw_rebel_leader
									var:pre_war_liege ?= scope:mw_rebel_leader
								}
							}
						}
					}
					set_variable = mw_level_1
				}
				else_if = { # Level 2; one vassal between scoped vassal and crown or rebel leader (e.g duke - LP - king)
					limit = {
						NOT = { liege = scope:mw_crown }
						OR = {
							liege.liege = scope:mw_crown
							liege.var:pre_war_liege ?= scope:mw_crown
							#liege.liege.var:pre_war_liege ?= scope:mw_crown
							trigger_if = {
								limit = { scope:mw_rebel_story.var:mw_mode = flag:mw_external }
								OR = {
									liege.liege = scope:mw_rebel_leader
									liege.var:pre_war_liege ?= scope:mw_rebel_leader
								}
							}
						}
					}
					set_variable = mw_level_2
				}
				else_if = { # Level 3; two vassals between scoped vassal and crown or rebel leader (e.g count - duke - LP - king)
					limit = {
						NOT = { liege.liege = scope:mw_crown }
						OR = {
							liege.liege.liege = scope:mw_crown
							liege.liege.var:pre_war_liege ?= scope:mw_crown
							#liege.liege.liege.var:pre_war_liege ?= scope:mw_crown
							trigger_if = {
								limit = { scope:mw_rebel_story.var:mw_mode = flag:mw_external }
								OR = {
									liege.liege.liege = scope:mw_rebel_leader
									liege.liege.var:pre_war_liege ?= scope:mw_rebel_leader
								}
							}
						}
					}

					set_variable = mw_level_3
				}
				else = { # Level 4; fallback
					set_variable = mw_level_4
				}
				#else = { # Error
				#	debug_log = "MW ERROR: Failed to sort vassals. This should not happen"
				#}
			}
			story_owner = { trigger_event = agot_mega_wars.0002 }
		}
	}
}
