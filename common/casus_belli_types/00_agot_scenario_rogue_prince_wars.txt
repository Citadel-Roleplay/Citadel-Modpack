daemon_stepstones_first_war = {
	icon = dragon_duchy_conquest_cb
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		OR = {
			scope:attacker = {
				OR = {
					is_current_dragonrider = no
					NOT = { this = character:Targaryen_61 }
				}
			}
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
		if = {
			limit = {
				scope:attacker = {
					OR = {
						is_alive = no
						is_current_dragonrider = no
					}
				}
			}

			scope:attacker = {
				set_player_character = title:e_the_iron_throne.holder
			}

			# Lose titles
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			title:c_dwarfstone.holder = {
				every_held_county = {
					limit = {
						duchy = title:d_first_stepstones
					}
					change_title_holder = {
						holder = title:d_first_stepstones.holder
						change = scope:change
						take_baronies = yes
					}
				}
			}
			resolve_title_and_vassal_change = scope:change

			if = {
				limit = {
					character:Targaryen_61 = {
						is_ruler = no
					}
				}
				character:Targaryen_61 = {
					if = {
						limit = {
							is_alive = yes
							NOT = { employer = title:e_the_iron_throne.holder }
						}
					}
					set_employer = title:e_the_iron_throne.holder
				}
				title:e_the_iron_throne.holder = {
					trigger_event = agot_scenario_trp.1009
				}
			}

			# Trigger lose events
			title:c_driftmark.holder = {
				trigger_event = agot_scenario_trp.0102
			}
			scope:defender = {
				trigger_event = agot_scenario_trp.1017
			}
		}
		else_if = {
			limit = {
				title:d_first_stepstones.holder = character:Targaryen_61 # Daemon killed but inherited
			}

			scope:attacker = {
				set_player_character = title:e_the_iron_throne.holder
			}

			# Make sure Daemon gets titles directly
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			title:d_first_stepstones.holder = {
				every_sub_realm_county = {
					limit = {
						duchy = title:d_first_stepstones
						NOT = { holder = character:Targaryen_61 }
					}
					change_title_holder = {
						holder = character:Targaryen_61
						change = scope:change
						take_baronies = yes
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
		}
	}

	cost = {
		piety = {
			value = 0
		}
		prestige = {
			value = 0
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer eligible vassals and sieze counties from ineligible ones
		every_in_list = {
			list = target_titles
			custom_tooltip = CONQUEST_CB_TITLE

			conquest_cb_title_transfer = {
				RELIGIOUS_WAR = no
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}

		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = target_titles
			limit = {
				NOT = { holder = scope:attacker }
			}
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		agot_8106_first_daemon_war_end_effects = yes
	}

	on_white_peace_desc = {
		# White peace is not possible, but this is required for error suppression
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes

		scope:attacker = {
			set_player_character = title:e_the_iron_throne.holder
		}

		# Lose titles
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:attacker = {
			every_held_county = {
				limit = {
					duchy = title:d_first_stepstones
				}
				change_title_holder = {
					holder = title:d_first_stepstones.holder
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				character:Targaryen_61 = {
					is_ruler = no
				}
			}
			character:Targaryen_61 = {
				if = {
					limit = {
						is_alive = yes
						NOT = { employer = title:e_the_iron_throne.holder }
					}
					set_employer = title:e_the_iron_throne.holder
				}
			}
			title:e_the_iron_throne.holder = {
				trigger_event = agot_scenario_trp.1009
			}
		}

		# Trigger lose events
		title:c_driftmark.holder = {
			trigger_event = agot_scenario_trp.0102
		}
		scope:defender = {
			trigger_event = agot_scenario_trp.1017
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "DAEMON_FIRST_STEPSTONE_WAR_NAME"
	war_name_base = "DAEMON_FIRST_STEPSTONE_WAR_NAME_BASE"
	cb_name = "DAEMON_FIRST_STEPSTONE_WAR_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
}

daemon_stepstones_second_war = {
	icon = dragon_kingdom_conquest_cb
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		OR = {
			scope:attacker = {
				is_current_dragonrider = no
				NOT = { this = character:Targaryen_61 }
			}
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
		if = {
			limit = { character:Targaryen_61 = { is_alive = no } }
			scope:attacker = { show_pow_release_message_effect = yes }

			#EP2 accolade glory gain for winning against higher ranked enemy
			scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

			# Prestige loss for the attacker
			scope:attacker = {
				pay_short_term_gold_reparations_effect = {
					GOLD_VALUE = 3
				}
				add_prestige = {
					value = major_prestige_value
					multiply = -1.0
				}
			}

			# Prestige for Defender
			scope:defender = {
				add_prestige_war_defender_effect = {
					PRESTIGE_VALUE = major_prestige_value
				}
			}

			# Allies on both sides get full prestige value for helping in the war, based on their war participation.
			modify_allies_of_participants_fame_values = {
				WINNER = scope:defender
				FAME_BASE = major_prestige_value
				IS_RELIGIOUS_WAR = no
				WINNER_ALLY_FAME_SCALE = 1
				LOSER_ALLY_FAME_SCALE = 1
			}

			add_truce_attacker_defeat_effect = yes

			scope:attacker = {
				save_temporary_scope_as = loser
			}
			on_lost_aggression_war_discontent_loss = yes

			# Lose titles
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			title:k_the_stepstones = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier <= tier_kingdom
						tier >= tier_county
						kingdom = title:k_the_stepstones
						exists = holder
						NOT = { holder.top_liege = title:k_the_stepstones.holder }
					}
					change_title_holder = {
						holder = title:k_the_stepstones.holder
						change = scope:change
						take_baronies = yes
					}
				}
			}
			resolve_title_and_vassal_change = scope:change

			if = {
				limit = {
					character:Targaryen_61 = {
						is_ruler = no
					}
				}
				character:Targaryen_61 = {
					if = {
						limit = {
							is_alive = yes
							NOT = { employer = title:e_the_iron_throne.holder }
						}
						set_employer = title:e_the_iron_throne.holder
					}
				}
				title:e_the_iron_throne.holder = {
					trigger_event = agot_scenario_trp.1009
				}
			}

			# Trigger lose events if part of the war
			if = {
				limit = {
					title:c_driftmark.holder = {
						has_character_flag = helped_daemon_second_war
					}
				}
				title:c_driftmark.holder = {
					trigger_event = agot_scenario_trp.0102
				}
			}
			if = {
				limit = {
					title:k_the_stepstones.holder = {
						agot_has_three_daughters_trigger = no
					}
				}
				title:k_the_stepstones.holder = {
					trigger_event = agot_scenario_trp.0203
				}
			}
		}

		#Crabfeeder cleanup
		hidden_effect = {
			if = {
				limit = {
					character:Drahar_8 = {
						is_alive = yes
						is_ruler = yes
					}
				}
				character:Drahar_8 = {
					clear_designated_heir = yes
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
		}
		prestige = {
			value = 0
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer eligible vassals and sieze counties from ineligible ones
		every_in_list = {
			list = target_titles
			limit = {
				NOT = { this = title:c_tigers_island }
				NOT = { this = title:c_last_refuge }
			}
			custom_tooltip = CONQUEST_CB_TITLE

			conquest_cb_title_transfer = {
				RELIGIOUS_WAR = no
			}
		}

		every_in_list = {
			list = vassals_taken
			limit = {
				NOT = {
					this = title:c_tigers_island.holder
				}
				NOT = {
					this = title:c_last_refuge.holder
				}
			}
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}

		every_in_list = {
			list = titles_taken
			limit = {
				NOT = { this = title:c_tigers_island }
				NOT = { this = title:c_last_refuge }
			}
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = target_titles
			limit = {
				NOT = { holder = scope:attacker }
				NOT = { this = title:c_tigers_island }
				NOT = { this = title:c_last_refuge }
			}
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		# Trigger win events
		character:Targaryen_61 = {
			trigger_event = agot_scenario_trp.0003
		}
		if = {
			limit = {
				title:c_driftmark.holder = {
					is_allied_in_war = character:Targaryen_61
				}
			}
			title:c_driftmark.holder = {
				trigger_event = agot_scenario_trp.0103
			}
		}
		# Corlys gets his dragonriders back
		character:Velaryon_31 = {
			primary_spouse = {
				remove_character_flag = agot_not_using_dragon
			}
			every_child = {
				remove_character_flag = agot_not_using_dragon
			}
		}
	}

	on_white_peace_desc = {
		# White peace is not possible, but this is required for error suppression
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes

		# Lose titles
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:attacker = {
			every_held_title = {
				limit = {
					tier <= tier_kingdom
					tier >= tier_county
					kingdom = title:k_the_stepstones
				}
				change_title_holder = {
					holder = title:k_the_stepstones.holder
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				character:Targaryen_61 = {
					is_ruler = no
				}
			}
			character:Targaryen_61 = {
				if = {
					limit = {
						is_alive = yes
						NOT = { employer = title:e_the_iron_throne.holder }
					}
					set_employer = title:e_the_iron_throne.holder
				}
			}
			title:e_the_iron_throne.holder = {
				trigger_event = agot_scenario_trp.1009
			}
		}

		# Trigger lose events if part of the war
		if = {
			limit = {
				title:c_driftmark.holder = {
					has_character_flag = helped_daemon_second_war
				}
			}
			title:c_driftmark.holder = {
				trigger_event = agot_scenario_trp.0102
			}
		}
		if = {
			limit = {
				title:k_the_stepstones.holder = {
					agot_has_three_daughters_trigger = no
				}
			}
			title:k_the_stepstones.holder = {
				trigger_event = agot_scenario_trp.0203
			}
		}

		#Crabfeeder cleanup
		hidden_effect = {
			if = {
				limit = {
					character:Drahar_8 = {
						is_alive = yes
						is_ruler = yes
					}
				}
				character:Drahar_8 = {
					clear_designated_heir = yes
				}
			}
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "DAEMON_SECOND_STEPSTONE_WAR_NAME"
	war_name_base = "DAEMON_SECOND_STEPSTONE_WAR_NAME_BASE"
	cb_name = "DAEMON_SECOND_STEPSTONE_WAR_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
}

triarchy_anti_daemon_war = {
	icon = claim_cb
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	cost = {
		piety = {
			value = 0
		}
		prestige = {
			value = 0
		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					OR = {
						is_alive = no
						NOR = {
							is_vassal_or_below_of = scope:attacker
							is_courtier_of = scope:attacker
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker }
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = {
							this = scope:attacker
							NOR = {
								is_vassal_or_below_of = scope:attacker
								is_courtier_of = scope:attacker
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}

	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change


		# Lose titles
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:defender = {
			every_held_title = {
				limit = {
					tier < tier_kingdom
					tier >= tier_county
					kingdom = title:k_the_stepstones
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
		}
		title:c_last_refuge.holder.top_liege = {
			if = {
				limit = {
					primary_title.tier <= tier_duchy
					is_independent_ruler = yes
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		title:c_tigers_island.holder.top_liege = {
			if = {
				limit = {
					primary_title.tier <= tier_duchy
					is_independent_ruler = yes
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				character:Targaryen_61 = {
					is_ruler = no
				}
			}
			character:Targaryen_61 = {
				if = {
					limit = {
						is_alive = yes
						NOT = { employer = title:e_the_iron_throne.holder }
					}
					set_employer = title:e_the_iron_throne.holder
				}
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
						type = favor_hook
						target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
					target = scope:claimant
					type = favor_hook
				}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}

	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		#EP2 accolade glory gain for defender doing alright
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
						type = favor_hook
						target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
					target = scope:claimant
					type = favor_hook
				}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}

	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
						type = favor_hook
						target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
					target = scope:claimant
					type = favor_hook
				}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 1000
}

admiral_subjugation_cb = {
	icon = vassalization
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	attacker_score_from_occupation_scale = 150
	attacker_score_from_battles_scale = 150
	defender_score_from_battles_scale = 150


	allowed_against_character = {
		# This is a scripted war, it technically does not need this
		# Including this will cause the war to invalidate when the former liege dies!
		# exists = scope:attacker.joined_faction
		# scope:attacker.joined_faction = {
		# 	special_title.holder = scope:defender
		# }
	}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		scope:defender = {
			#AGOT Modified, must be true independent
			#is_independent_ruler = no
			agot_is_independent_ruler = no
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_invalidated_desc = msg_subjugation_war_invalidated_message

	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender.primary_title.tier < scope:attacker.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = subjugation_war_warning_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}

		if = {
			limit = {
				scope:defender.primary_title.tier < scope:attacker.primary_title.tier
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		else = {
			scope:defender = {
				every_held_title = {
					if = {
						limit = {
							tier = scope:defender.primary_title.tier
						}
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					else_if = {
						limit = {
							OR = {
								NOT = { exists = scope:secondary_title }
								tier > scope:secondary_title.tier
							}
						}
						save_temporary_scope_as = secondary_title
					}
				}
			}

			scope:defender = {
				if = {
					limit = {
						exists = scope:secondary_title
					}
					every_vassal = {
						limit = {
							primary_title.tier >= scope:secondary_title.tier
							NOT = {
								primary_title.tier = tier_barony
							}
						}
						change_liege = {
							liege = scope:attacker
							change = scope:change
						}
					}
				}
			}

			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}

		resolve_title_and_vassal_change = scope:change


		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = major_prestige_value
			}
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
	}

	on_white_peace = {
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker.primary_title.tier < scope:defender.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
		triggered_desc = {
			trigger = { scope:defender = { is_local_player = yes } }
			desc = subjugation_war_warning_desc
		}
	}

	on_defeat = {
		scope:defender = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}

		if = {
			limit = {
				scope:attacker.primary_title.tier < scope:defender.primary_title.tier
			}
			scope:attacker = {
				change_liege = {
					liege = scope:defender
					change = scope:change
				}
			}
		}
		else = {
			scope:attacker = {
				every_held_title = {
					if = {
						limit = {
							tier = scope:attacker.primary_title.tier
						}
						change_title_holder = {
							holder = scope:defender
							change = scope:change
						}
					}
					else_if = {
						limit = {
							OR = {
								NOT = { exists = scope:secondary_title }
								tier > scope:secondary_title.tier
							}
						}
						save_temporary_scope_as = secondary_title
					}
				}
			}

			scope:attacker = {
				if = {
					limit = {
						exists = scope:secondary_title
					}
					every_vassal = {
						limit = {
							primary_title.tier >= scope:secondary_title.tier
							NOT = {
								primary_title.tier = tier_barony
							}
						}
						change_liege = {
							liege = scope:defender
							change = scope:change
						}
					}
				}
			}

			scope:attacker = {
				change_liege = {
					liege = scope:defender
					change = scope:change
				}
			}
		}

		resolve_title_and_vassal_change = scope:change


		# Prestige level progress for the defender
		scope:defender = {
			add_prestige_experience = {
				value = major_prestige_value
			}
		}

		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:defender = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "SUBJUGATION_WAR_NAME"
	war_name_base = "SUBJUGATION_WAR_NAME_BASE"
	cb_name = "SUBJUGATION_CB_NAME"
	interface_priority = 59

	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}

daemon_invades_triarchy_war = {
	icon = dragon_kingdom_conquest_cb
	group = event
	ai_only_against_liege = no
	allow_hostages = no
	white_peace_possible = no

	allowed_against_character = {}

	target_de_jure_regions_above = yes

	valid_to_start = {}

	should_invalidate = {
		OR = {
			scope:attacker = {
				is_current_dragonrider = no
				NOT = { this = character:Targaryen_61 }
			}
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:defender = {
				#AGOT Modified, must be true independent
				agot_is_independent_ruler = no
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_draconic_subjugation_cb
		}
		scope:defender = {
			trigger_event = {
				id = agot_dragon.0014
				days = 1
			}
		}
	}

	on_invalidated_desc = msg_subjugation_war_invalidated_message

	on_invalidated = {
		scope:attacker = {
			if = {
				limit = {
					is_alive = yes
				}
				remove_character_flag = used_draconic_subjugation_cb # If the war is invalidated, you should be permitted to try again
				# Refund their investment.
				add_prestige_no_experience = major_prestige_value
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender.primary_title.tier < scope:attacker.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
		triggered_desc = {
			trigger = {
				scope:attacker = {
					is_local_player = yes
					NOT = {
						dynasty ?= { has_dynasty_perk = dragonrider_dynasty_legacy_5 }
					}
				}
			}
			desc = declared_draconic_subjugation_war_flag_tt
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		scope:attacker = { get_title = title:e_three_daughters }

		title:k_myr.holder = {
			add_to_list = three_daughters_title_theft_list
		}
		title:k_lys.holder = {
			add_to_list = three_daughters_title_theft_list
		}
		title:k_tyrosh.holder = {
			add_to_list = three_daughters_title_theft_list
		}

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}
		every_in_list = {
			list = three_daughters_title_theft_list
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		scope:attacker = {
			trigger_event = {
				id = agot_dragon.0017
				days = 1
			}
		}

		if = {
			limit = {
				scope:attacker = { government_has_flag = government_is_free_city }
			}
			every_in_list = {
				list = main_titles
				add_title_law = dictatorship_succession_law
			}
		}

		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = major_prestige_value
			}
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tribal_subjugation_cb_white_peace_desc_defender
			}
			desc = tribal_subjugation_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tribal_subjugation_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = tribal_subjugation_cb_defeat_desc_attacker
			}
			desc = tribal_subjugation_cb_white_peace_desc
		}
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		on_lost_aggression_war_discontent_loss = yes

	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "DAEMON_TRIARCHY_CONQUEST_WAR_NAME"
	war_name_base = "DAEMON_TRIARCHY_CONQUEST_WAR_NAME_BASE"
	cb_name = "DRAGON_SUBJUGATION_CB_NAME"
	interface_priority = 999

	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}