rv_duskendale_rescue_war = { # The Rescue of King Aerys
	group = personal
	icon = rv_rescue
	target_titles = none
	target_top_liege_if_outside_realm = no
	white_peace_possible = no

	# valid_to_start = { always = no } # This is an event CB, you should not be allowed to fire it manually
	valid_to_start = {
		game_start_date = 8277.1.1
		OR = {
			AND = {
				character:Targaryen_3 ?= { is_at_war = no }
				this = character:Targaryen_3
				character:Targaryen_1 ?= { is_imprisoned_by = title:d_duskendale.holder }
			}
			AND = {
				character:Lannister_1 ?= { is_at_war = no }
				this = character:Lannister_1
				character:Targaryen_1 ?= { is_imprisoned_by = title:d_duskendale.holder }
			}
		}
	}

	allowed_for_character = {
		game_start_date = 8277.1.1
		scope:attacker = {
			OR = {
				AND = {
					exists = character:Targaryen_3
					this = character:Targaryen_3
					character:Targaryen_1 ?= { is_imprisoned_by = title:d_duskendale.holder }
				}
				AND = {
					exists = character:Lannister_1
					this = character:Lannister_1
					character:Targaryen_1 ?= { is_imprisoned_by = title:d_duskendale.holder }
				}
			}
		}
	}
	allowed_against_character = {
		game_start_date = 8277.1.1
		scope:defender = {
			OR = {
				AND = {
					exists = title:d_duskendale.holder
					this = title:d_duskendale.holder
					character:Targaryen_1 ?= { is_imprisoned_by = title:d_duskendale.holder }
				}
				AND = {
					exists = character:Darklyn_47
					this = character:Darklyn_47
					character:Targaryen_1 ?= { is_imprisoned_by = title:d_duskendale.holder }
				}
			}
		}
	}

	on_declaration = {
		on_declared_war = yes
		debug_log = "rv_rescue_war_declared"

		scope:attacker = {
			random_owned_story = {
				limit = {
					story_type = rv_rescue_war_story
					has_variable_list = rv_rescue_list
				}
				save_scope_as = rv_rescue_story
				every_in_list = {
					variable = rv_rescue_list
					limit = {
						OR = {
							AND = {
								is_alive = yes
								is_imprisoned = yes
								is_imprisoned_by = scope:defender
							}

							AND = {
								is_alive = yes
								is_concubine = yes
								is_concubine_of = scope:defender
							}
						}
					}
					scope:rv_rescue_story = {
						add_to_variable_list = {
							name = rv_currently_rescuing
							target = prev
						}
					}
					if = {
						limit = {
							has_variable = rv_is_former_spouse
						}
						scope:attacker = {
							set_variable = {
								name = rv_block_ai_marriage
								value = yes
							}
						}
						remove_variable = rv_is_former_spouse
					}
				}
			}
		}

		scope:defender = {
			if = {
				limit = {
					any_owned_story = {
						story_type = rv_rescue_war_defender_story
						count = 0
					}
				}
				create_story = {
					type = rv_rescue_war_defender_story
					save_scope_as = rv_rescue_defender_story
				}
			}

			else = {
				random_owned_story = {
					limit = {
						story_type = rv_rescue_war_defender_story
					}
					save_scope_as = rv_rescue_defender_story
				}
			}

			if = {
				limit = {exists = scope:rv_rescue_defender_story}
				scope:rv_rescue_defender_story = {
					add_to_variable_list = {
						name = rv_attacking_rescuers
						target = scope:attacker
					}
				}
			}
			add_to_variable_list = {
				name = rv_attacking_rescuers_temp
				target = scope:attacker
			}
			### Opinion maul for trying to free a criminal
			if = {
				limit = {
					scope:attacker = {
						has_variable_list = rv_rescue_list_temp
						any_in_list = {
							variable = rv_rescue_list_temp
							is_alive = yes
							is_imprisoned = yes
							is_imprisoned_by = scope:defender
							scope:defender = {
								has_imprisonment_reason = prev
							}
						}
					}
				}
				add_opinion = {
					target = scope:attacker
					modifier = rv_attempt_free_my_criminal
				}
				hidden_effect = {
					if = {
						limit = { can_set_relation_rival_if_adult_trigger = { CHARACTER = scope:attacker } }
						progress_towards_rival_effect = {
							CHARACTER = scope:attacker
							REASON = esr_rival_declared_war_vengeful
							OPINION = 0
						}
					}
				}
			}

			if = {
				limit = {
					target_is_vassal_or_below = scope:attacker
				}
				add_opinion = {
					target = scope:attacker
					modifier = rebellious_vassal_opinion
				}
			}
		}

		scope:attacker = {
			clear_variable_list = rv_rescue_list_temp
			remove_variable = rv_defender_temp
		}

		### workaround for primary heir not working in any_killed_character
		scope:attacker = {
			random_owned_story = {
				limit = {
					story_type = rv_rescue_war_story
					has_variable_list = rv_currently_rescuing
				}
				every_in_list = {
					variable = rv_currently_rescuing
					limit = {
						is_primary_heir_of = scope:attacker
					}
					scope:attacker = {
						set_variable = {
							name = rv_rescuing_primary_heir
							value = prev
						}
					}
				}
			}
		}

		if = {
			limit = { exists = war }
			war = {
				if = {
					limit = {
						exists = scope:defender
						scope:defender = { is_independent_ruler = no}
						scope:defender.top_liege = scope:attacker.top_liege
						NOR = {
							scope:defender.liege = scope:defender.top_liege
							scope:defender.liege = scope:attacker.liege
						}
					}
					add_defender = scope:defender.liege
				}
				else_if = {
					limit = {
						exists = scope:defender
						scope:defender = { is_independent_ruler = no }
						NOT = {scope:defender.top_liege = scope:attacker.top_liege}
					}
					add_defender = scope:defender.top_liege
				}
			}
		}
	}

	cost = {
		prestige = {
			value = 0
			add = {
				value = medium_prestige_value
				desc = CB_BASE_COST
			}
			if = {
				limit = {
					always = yes
				}
				add = rv_rescue_cost
			}
			if = {
				limit = {
					always = yes
				}
				add = rv_rescue_criminal_cost
			}
			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:defender = { is_local_player = yes }
				}
				desc = rescue_war_victory_desc_defender
			}
			desc = rescue_war_victory_desc
		}
	}

	on_victory = {
		# scope:attacker = { show_pow_release_message_effect = yes }

		hidden_effect = {
			debug_log = "rv_rescue_war_won"

			remove_attacking_rescuer_for_defender = yes
			# Erase all pictures of Ron
			agot_dd_set_aerys_free = yes
		}

		scope:attacker = { save_scope_as = rescue_war_winner }
		scope:defender = { # Denys is Done For
			trigger_event = {
				id = agot_scenario_dd.0080
			}
		}

		# release prisoner
		scope:attacker = {
			random_owned_story = {
				limit = {
					story_type = rv_rescue_war_story
					has_variable_list = rv_currently_rescuing
				}
				every_in_list = {
					variable = rv_currently_rescuing
					limit = {
						is_alive = yes
						### Some chars will be auto released upon war end
						#is_imprisoned = yes
						#is_imprisoned_by = scope:defender
					}

					if = {
						limit = {
							is_imprisoned = yes
							OR = {
								is_imprisoned_by = scope:defender
								is_imprisoned_by = scope:attacker
							}
						}
						release_from_prison = yes
					}

					if = {
						limit = {
							scope:attacker = {is_ai = no}
							is_concubine = yes
							NOT = {is_concubine_of = scope:attacker}
							any_former_spouse = {
								this = scope:attacker
							}
							any_consort = {
								reverse_has_opinion_modifier = {
									modifier = forced_me_concubine_marriage_opinion
									target = prev
								}
							}
						}
						every_consort = {
							remove_concubine = prev
						}
						hidden_effect = {
							scope:attacker = {
								add_courtier = prev
							}
							add_opinion = {
								target = scope:attacker
								modifier = rv_rescued_former_spouse
							}
						}
					}

					else_if = {
						limit = {
							scope:attacker = {
								is_ai = yes
								is_married = no
								is_male = yes
							}
							is_concubine = yes
							NOT = {is_concubine_of = scope:attacker}
							any_former_spouse = {
								this = scope:attacker
							}
							any_consort = {
								reverse_has_opinion_modifier = {
									modifier = forced_me_concubine_marriage_opinion
									target = prev
								}
							}
						}
						every_consort = {
							remove_concubine = prev
						}
						hidden_effect = {
							scope:attacker = {
								marry = prev
							}
							add_opinion = {
								target = scope:attacker
								modifier = rv_rescued_former_spouse
							}
						}
					}

					else_if = {
						limit = {
							scope:attacker = {
								is_ai = yes
								is_married = no
								is_female = yes
							}
							is_concubine = yes
							NOT = {is_concubine_of = scope:attacker}
							any_former_spouse = {
								this = scope:attacker
							}
							any_consort = {
								reverse_has_opinion_modifier = {
									modifier = forced_me_concubine_marriage_opinion
									target = prev
								}
							}
						}
						every_consort = {
							remove_concubine = prev
						}
						hidden_effect = {
							scope:attacker = {
								marry_matrilineal = prev
							}
							add_opinion = {
								target = scope:attacker
								modifier = rv_rescued_former_spouse
							}
						}
					}

					else_if = {
						limit = {
							is_concubine = yes
							NOT = {is_concubine_of = scope:attacker}
							any_consort = {
								reverse_has_opinion_modifier = {
									modifier = forced_me_concubine_marriage_opinion
									target = prev
								}
							}
						}
						every_consort = {
							remove_concubine = prev
						}
						hidden_effect = {
							scope:attacker = {
								add_courtier = prev
							}
						}
					}

					hidden_effect = {
						rv_rescue_relation_boost = yes
					}
				}

				if = {
					limit = {
						scope:defender = {
							is_alive = yes
						}
						any_in_list = {
							variable = rv_currently_rescuing
							save_temporary_scope_as = rescue_target
							OR = {
								scope:defender = {
									any_killed_character = {
										this = scope:rescue_target
									}
								}
								AND = {
									is_alive = no
									exists = scope:attacker.var:rv_rescuing_primary_heir
									this = scope:attacker.var:rv_rescuing_primary_heir
								}
							}
						}
					}
					scope:attacker= {
						trigger_event = {
							on_action = rv_hard_imprison
							days = 1
						}
					}
				}
				end_story = yes
			}
			remove_variable = rv_rescuing_primary_heir
			remove_variable = rv_block_ai_marriage
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = { desc = rv_rescue_war_white_peace_desc }

	on_white_peace = {}

	on_defeat_desc = { desc = rv_rescue_war_defeat_desc }

	on_defeat = {
		scope:attacker = {
			random_owned_story = {
				limit = {
					story_type = rv_rescue_war_story
					has_variable_list = rv_currently_rescuing
				}
				#save_scope_as = rv_rescue_story
				every_in_list = {
					variable = rv_currently_rescuing
					limit = {
						is_alive = yes
						is_imprisoned = no
						is_concubine = no
					}
					hidden_effect = {
						rv_attempted_rescue_relation_boost = yes
					}
				}
			}
		}

		hidden_effect = {
			debug_log = "rv_rescue_war_defeated"

			create_failed_rescue_memory = yes

			end_rescue_story_for_attacker = yes

			remove_attacking_rescuer_for_defender = yes

			scope:attacker = {
				remove_variable = rv_rescuing_primary_heir
				remove_variable = rv_block_ai_marriage
			}
		}

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 4.5
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.5
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
	}

	should_invalidate = {
		character:Targaryen_1 ?= {
			is_alive = no
			is_imprisoned = no
		}
	}

	on_invalidated = {
		hidden_effect = {
			debug_log = "rv_rescue_war_invalidated"

			scope:attacker = {
				random_owned_story = {
					limit = {
						story_type = rv_rescue_war_story
						has_variable_list = rv_currently_rescuing
					}

					every_in_list = {
						variable = rv_currently_rescuing
						limit = {
							is_alive = yes
							is_imprisoned = no
							is_concubine = no
						}
						hidden_effect = {
							rv_attempted_rescue_relation_boost = yes
						}
					}
				}
			}

			end_rescue_story_for_attacker = yes

			remove_attacking_rescuer_for_defender = yes

			scope:attacker = {
				remove_variable = rv_rescuing_primary_heir
				remove_variable = rv_block_ai_marriage
			}
		}
	}

	on_invalidated_desc = {
		desc = rv_duskendale_rescue_war_invalidated_desc
	}
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "RESCUE_WAR_NAME"
	cb_name_no_target = "RESCUE_WAR_NAME"

	interface_priority = 1002

	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	attacker_ticking_warscore = 0.25
	defender_ticking_warscore = 0
	attacker_wargoal_percentage = 0

	#max_ai_diplo_distance_to_title = 500

	should_show_war_goal_subview = no

	#target_de_jure_regions_above = yes
	ai = no

	#ai_score = {
		#value = rv_rescue_war_ai_score_value_extreme
	#}
}

agot_duskendale_independence_war = { # Duskendale vs Iron Throne
	group = independence
	allow_hostages = no
	white_peace_possible = no

	allowed_for_character =	{}

	allowed_against_character = {}

	should_invalidate = {}

	valid_to_start = { always = no } # This is an event CB, you should not be allowed to fire it manually

	cost = {
		piety = {
			value = 0
			if = { # Attacking your HoF is impious
				limit = {
					exists = scope:attacker.faith.religious_head
					scope:attacker.faith.religious_head = scope:defender
				}
				if = {
					limit = {
						scope:attacker.faith = {
							has_doctrine = doctrine_spiritual_head
						}
					}
					add = {
						value = massive_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
				else = {
					add = {
						value = medium_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
			}
			if = {
				limit = {
					scope:attacker.faith = scope:defender.faith
					scope:defender = {
						has_government = theocracy_government
					}
				}
				add = {
					value = medium_piety_value
					desc = CB_ATTACKER_THEOCRACY
				}
			}
		}
		prestige = {
			value = 0
			add = {
				value = 500
				desc = CB_BASE_COST
			}
			if = {
				limit = {
					scope:attacker = {
						has_government = tribal_government
					}
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Prestige Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_chronicle_writing
							has_innovation = innovation_land_grants
							has_innovation = innovation_rightful_ownership
						}
					}
				}
				multiply = {
					value = 0.7
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
							}
							OR = {
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.8
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_ATTACKER_INNOVATIONS
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Culture
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_cultural_parameter = cheaper_cbs
						}
					}
				}
				multiply = {
					value = 0.8
					desc = "CB_ATTACKER_CULTURE"
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						agot_is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_declaration = { on_declared_war = yes }

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { # Desc for only one player attacker
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = independence_war_victory_desc_local_player_attacker_alone
			}
			triggered_desc = { # Desc for only one attacker, player defender
				trigger = {
					scope:defender = {
						is_local_player = yes
					}
				}
				desc = player_independence_war_victory_desc_local_player_defender_attacker_alone
			}
			desc = independence_war_victory_desc_local_player_attacker_alone # Desc for a third party involved
		}
	}

	on_victory = {
		scope:defender = {
			random_owned_story = {
				limit = { story_type = story_agot_mw_crown }
				save_scope_as = mw_crown_story
			}
			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}

			scope:scenario_dd_story ?= { # The Scenario is Resolved
				set_variable = {
					name = agot_dd_scenario
					value = flag:resolved
				}
				set_variable = {
					name = agot_dd_selmy
					value = flag:resolved
				}
			}
		}
		scope:attacker = {
			show_pow_release_message_effect = yes
			add_character_flag = ai_should_not_transfer

			random_owned_story = {
				limit = { story_type = story_agot_mw_rebel }
				save_scope_as = mw_rebel_story # the attacker side must always be the rebel side!
			}
			remove_variable = pre_war_liege
			agot_mw_clear_data_effect = yes

			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
			if = {
				limit = { has_character_flag = wear_armor }
				remove_character_flag = wear_armor
			}
			if = {
				limit = { has_character_flag = no_hat }
				remove_character_flag = no_hat
			}

			scope:mw_rebel_story ?= {
				every_in_list = {
					variable = mw_rebel_supporter_list

					if = {
						limit = { highest_held_title_tier = tier_kingdom }

						remove_variable = pre_war_liege

						hidden_effect = {
							set_variable = {
								name = independence_war_former_liege
								value = scope:defender
							}
							add_truce_both_ways = {
								character = scope:defender
								days = 1825
								war = root.war
								result = victory
							}
							save_scope_as = current_member

							# Struggle Catalyst
							if = {
								limit = {
									catalyst_gave_independence_to_powerful_diff_faith_culture_vassal_preliminary_trigger = {
										CHAR1 = scope:defender
										CHAR2 = scope:current_member
									}
									any_character_struggle = {
										involvement = involved
										activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
											CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
											CHAR = scope:current_member
										}
									}
								}
								every_character_struggle = {
									involvement = involved
									limit = {
										activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
											CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
											CHAR = scope:current_member
										}
									}
									activate_struggle_catalyst = {
										catalyst = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
										character = scope:defender
									}
								}
							}
						}
					}
				}
			}

			hidden_effect = {
				set_variable = {
					name = independence_war_former_liege
					value = scope:defender
				}
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}

				create_title_and_vassal_change = {
					type = independency
					save_scope_as = indpendence_change
					add_claim_on_loss = no
				}
				becomes_independent = {
					change = scope:indpendence_change
				}
				resolve_title_and_vassal_change = scope:indpendence_change
			}

			add_prestige = medium_prestige_value
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = {
						any_owned_story = {
							story_type = story_agot_mw_rebel
							any_in_list = {
								variable = mw_rebel_supporter_list
								highest_held_title_tier = tier_kingdom
								count > 1
							}
						}
					}
					scope:defender = { is_local_player = yes }
				}
				desc = independence_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_independence_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_independence_war_white_peace_attacker_desc
			}
			desc = player_independence_war_white_peace_desc #AGOT TODO get a new proper desc here
		}
	}

	on_white_peace = {}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = {
						any_owned_story = {
							story_type = story_agot_mw_rebel
							any_in_list = {
								variable = mw_rebel_supporter_list
								highest_held_title_tier = tier_kingdom
								count > 1
							}
						}
					}
					scope:defender = { is_local_player = yes }
				}
				desc = independence_defeat_defender_desc
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_independence_defeat_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_independence_defeat_attacker_desc
			}
			desc = player_independence_war_defeat_desc
		}
	}

	on_defeat = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			hard_imprison_character_effect = {
				TARGET = this
				IMPRISONER = scope:defender
			}
			scope:defender = {
				add_opinion = {
					target = prev
					modifier = vassal_lost_faction_revolt_war
				}
			}
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}
		scope:defender = {
			add_character_flag = {
				flag = recent_independence_faction_war
				years = faction_war_defeat_cooldown
			}
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }

			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}

			scope:scenario_dd_story ?= { # The Scenario is Resolved
				set_variable = {
					name = agot_dd_scenario
					value = flag:resolved
				}
				set_variable = {
					name = agot_dd_selmy
					value = flag:resolved
				}
			}
		}

		scope:attacker = { # Game Over
			trigger_event = {
				id = agot_scenario_dd.0220
			}
		}
		scope:defender = { # Transition of Power - Immediate
			trigger_event = {
				id = agot_scenario_dd.0201
				delayed = yes
			}
			if = {
				limit = { has_character_flag = wear_armor }
				remove_character_flag = wear_armor
			}
			if = {
				limit = { has_character_flag = no_hat }
				remove_character_flag = no_hat
			}
		}
		debug_log = "AGOTDD: Duskendale final independence war completed"
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_attacker_inheritance_validity = no
	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer

	war_name = "AGOT_DUSKENDALE_INDEPENDENCE_WAR_NAME"

	interface_priority = 120

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50

	defender_wargoal_percentage = 0.0 # A single occupation will do
}

agot_duskendale_claimant_war = { # Iron Throne vs Duskendale
	group = civil_war
	ai_only_against_liege = no
	target_titles = claim
	allow_hostages = no
	white_peace_possible = no

	allowed_for_character =	{}

	allowed_against_character = {}

	target_de_jure_regions_above = yes

	valid_to_start = { always = no }

	should_invalidate = {}

	on_invalidated_desc = msg_invalidate_war_title

	on_declaration = {}

	on_victory_desc = { desc = claimant_faction_war_victory_desc }

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
			}
		}

		on_claimant_faction_war_win_common = {
			TARGET_TITLES = target_titles
			ATTACKER = scope:attacker
			DEFENDER = scope:defender
			CLAIMANT = scope:claimant
		}
		# Transfer of Power
		if = {
			limit = {
				OR = {
					character:Darklyn_47.house ?= {
						any_house_member = {
							is_alive = yes
							is_landed = yes
							any_held_title = {
								NOR = {
									this = title:d_duskendale
									this = title:c_duskendale
								}
							}
						}
					}
					character:Hollard_34.house ?= {
						any_house_member = {
							is_alive = yes
							is_landed = yes
							any_held_title = { NOT = { this = title:c_crownback } }
						}
					}
				}
			}
			agot_dd_duskendale_title_transfer = { HOLDER = scope:claimant }
		}

		scope:defender = {
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}

		scope:attacker = {
			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
			if = {
				limit = { has_character_flag = wear_armor }
				remove_character_flag = wear_armor
			}
			if = {
				limit = { has_character_flag = no_hat }
				remove_character_flag = no_hat
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	on_white_peace_desc = { desc = claimant_faction_war_white_peace_desc }

	on_white_peace = {}

	on_defeat_desc = { desc = claimant_faction_war_defeat_desc }

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		on_lost_faction_revolt_war = yes

		scope:defender = {
			add_dread = medium_dread_gain
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}

		scope:attacker = {
			random_owned_story = {
				limit = { story_type = story_agot_scenario_dd }
				save_scope_as = scenario_dd_story
			}
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
			if = {
				limit = { has_character_flag = wear_armor }
				remove_character_flag = wear_armor
			}
			if = {
				limit = { has_character_flag = no_hat }
				remove_character_flag = no_hat
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit # Cannot inherit faction, else this breaks
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIMANT_WAR_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 50
	max_defender_score_from_battles = 100

	max_ai_diplo_distance_to_title = 500
}

agot_duskendale_iron_throne_war = { # Duskendale Great Council Result
	group = civil_war
	ai_only_against_liege = no
	target_titles = claim
	allow_hostages = no
	white_peace_possible = no

	allowed_for_character =	{}

	allowed_against_character = {}

	target_de_jure_regions_above = yes

	valid_to_start = { always = no }

	should_invalidate = {}

	on_invalidated_desc = msg_invalidate_war_title

	on_invalidated = {
		if = {
			limit = {
				OR = {
					character:Targaryen_1 ?= { is_alive = no }
					character:Targaryen_3 ?= title:e_the_iron_throne.holder
				}
			}
			scope:attacker = {
				if = {
					limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
					random_owned_story = {
						limit = { story_type = story_agot_scenario_dd }
						save_scope_as = scenario_dd_story
					}
				}
				if = {
					limit = { has_character_flag = planning_an_activity }
					remove_character_flag = planning_an_activity
				}
			}

			scope:scenario_dd_story ?= { # The Scenario is Resolved
				set_variable = {
					name = agot_dd_scenario
					value = flag:resolved
				}
				set_variable = {
					name = agot_dd_selmy
					value = flag:resolved
				}
			}
		}
	}

	on_declaration = {}

	on_victory_desc = { desc = claimant_faction_war_victory_desc }

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = victory
				}
			}
		}

		on_claimant_faction_war_win_common = {
			TARGET_TITLES = target_titles
			ATTACKER = scope:attacker
			DEFENDER = scope:defender
			CLAIMANT = scope:claimant
		}

		scope:attacker = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}
		scope:defender = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	on_white_peace_desc = { desc = claimant_faction_war_white_peace_desc }

	on_white_peace = {}

	on_defeat_desc = { desc = claimant_faction_war_defeat_desc }

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		on_lost_faction_revolt_war = yes

		scope:defender = {
			add_dread = medium_dread_gain
			add_achievement_flag_effect = { FLAG = achievement_know_your_place_flag }
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}

		scope:attacker = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
			if = {
				limit = { has_character_flag = planning_an_activity }
				remove_character_flag = planning_an_activity
			}
		}
		scope:defender = {
			if = {
				limit = { any_owned_story = { story_type = story_agot_scenario_dd } }
				random_owned_story = {
					limit = { story_type = story_agot_scenario_dd }
					save_scope_as = scenario_dd_story
				}
			}
		}

		scope:scenario_dd_story ?= { # The Scenario is Resolved
			set_variable = {
				name = agot_dd_scenario
				value = flag:resolved
			}
			set_variable = {
				name = agot_dd_selmy
				value = flag:resolved
			}
		}
	}

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = invalidate

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIMANT_WAR_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 50
	max_defender_score_from_battles = 100

	max_ai_diplo_distance_to_title = 500
}