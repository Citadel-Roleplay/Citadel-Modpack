# On actions for war events, triggered automatically by the game

# called for wars after being transferred to a new defender
# root is the primary attacker
# scope:war is the war
# scope:defender is the new defender
#on_war_transferred = {



# called when a war is started.
# same scopes are available in these events as in the CBs' on_declaration, this just fires for all CBs instead of a specific CB. (scope:attacker and scope:defender)
#on_war_started = {
#	on_actions = {
#		asoiaf_mega_war_cleanup
#	}
#}

asoiaf_mega_war_cleanup = {
	trigger = {
		has_game_rule = asoiaf_mega_war_cleanup_on
		scope:attacker = {
			OR = { #is in a mega war
				agot_mw_crown_trigger = yes
				agot_mw_rebel_leader_trigger = yes
				agot_mw_is_in_loyalist_list_trigger = { TARGET = scope:attacker }
				agot_mw_is_in_neutral_list_trigger = { TARGET = scope:attacker }
				agot_mw_is_in_rebel_list_trigger = { TARGET = scope:attacker }
			}
		}
		scope:defender = {
			OR = { #is in a mega war
				agot_mw_crown_trigger = yes
				agot_mw_rebel_leader_trigger = yes
				agot_mw_is_in_loyalist_list_trigger = { TARGET = scope:defender }
				agot_mw_is_in_neutral_list_trigger = { TARGET = scope:defender }
				agot_mw_is_in_rebel_list_trigger = { TARGET = scope:defender }
			}
		}
	}
	effect = {
		scope:attacker = { #not scoping the defender since the King could already be fighting a Mega War; the script must focus on the NEWLY DECLARED one
			trigger_event = { id = asoiaf_mega_war_events.0001 days = 5 } #enough delay for the mega war sides to trigger
		}
	}
}

on_war_won_defender = {
	on_actions = {
		asoiaf_forge_krakenfall_on_action
	}
}

asoiaf_forge_krakenfall_on_action = {
	trigger = {
		scope:war.primary_attacker.dynasty = dynasty:dynn_Greyjoy
		scope:war.primary_attacker = { has_title = title:k_the_iron_islands }
		scope:war.primary_defender = { has_inactive_trait = asoiaf_Baratheon_2_trait } #This is Robert I Baratheon
		scope:war.primary_defender = { has_title = title:e_the_iron_throne } #Robert is King of the Seven Kingdoms
		NOT = { exists = global_var:asoiaf_krakenfall_is_forged }
	}
	effect = {
		scope:war.primary_defender = { trigger_event = { id = asoiaf_maintenance_events.0010 days = 30 } }
		set_global_variable = asoiaf_krakenfall_is_forged #so this can't trigger twice
	}
}