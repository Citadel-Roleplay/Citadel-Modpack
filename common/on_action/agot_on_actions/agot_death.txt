# character just about to die in root scope
# if a killer is know, it's set as scope:killer
#Triggered by code

on_death = {
	events = {
		agot_small_council.0002 # Cleans up Small Councillor
		agot_kingsguard.1000 # KG Maintenance
		agot_widowed_events.999 #Check to see if widowed story cycle should begin
		agot_valyrian_steel.0003
		agot_valyrian_steel.9000
		agot_dragonstone.0006
		agot_dragon.0001
	}
	on_actions = {
		agot_after_death_on_action
		nw_ranger_death
		nw_ranger_history_on_lc_death
		agot_mw_death_on_action
	}
}

agot_after_death_on_action = {
	trigger = {
		always = yes
	}
	effect = {
		if = {
			limit = { has_trait = dragon }
			save_scope_as = dead_dragon
			if = {
				limit = {
					agot_ruins_has_dragon_storage_system = yes
				}
				title:c_ruins.holder = {
					every_owned_story = {
						limit = {
							story_type = story_dragon_variable_storage
							var:dragon_id ?= root
						}
						save_scope_as = dragon_var_story_val
					}
				}
				every_in_list = {
					variable = past_riders
					scope:dragon_var_story_val = {
						add_to_variable_list = {
							name = past_riders
							target = prev
						}
					}
				}
			}
			every_player = {
				limit = { always = yes }
				send_interface_message = {
					type = msg_dragon_death
					title = {
						first_valid = {
							triggered_desc = {
								trigger = {
									any_living_dragon = {
										count = 0
									}
								}
								desc = agot_dragon_maintenance.0904.t_last_dragon_died
							}
							triggered_desc = {
								trigger = {
									any_living_dragon = {
										count <= 5
									}
								}
								desc = agot_dragon_maintenance.0904.t
							}
							triggered_desc = {
								trigger = {
									any_living_dragon = {
										count > 5
									}
								}
								desc = agot_dragon_maintenance.0904.t_many_dragons_extant
							}
						}
					}
					desc = agot_dragon_maintenance_msg_dragon_death_placeholder
					left_icon = scope:dead_dragon
				}
			}
			agot_dragon_death_magic_effect = yes
			agot_dead_dragon_effect = yes
		}
		else_if = {
			limit = {
				exists = var:current_dragon
			}
			random_equipped_character_artifact = {
				limit = {
					artifact_type = dragon_horn
				}
				clear_variable_list = tamed_dragons
			}
			save_scope_as = dead_rider
			var:current_dragon = {
				save_scope_as = dead_riders_dragon
			}
			scope:dead_riders_dragon = { trigger_event = { id = agot_dragon.0002 } } # Needs to fire on the dragon because of diseases causing on_death orders of operation trickery.
		}
		else_if = {
			limit = {
				is_human = yes
				any_relation = {
					type = agot_dragon
				}
			}
			save_scope_as = dead_rider
			random_relation = {
				type = agot_dragon
				save_scope_as = dead_riders_dragon
			}
			scope:dead_riders_dragon = { trigger_event = { id = agot_dragon.0002 } } # Needs to fire on the dragon because of diseases causing on_death orders of operation trickery.
		}
		save_scope_as = dead_relative
		every_close_family_member = {
			if = {
				limit = { is_ruler = yes }
				random_list = {
					100 = {}
					1 = {
						trigger_event = {
							id = agot_silent_sisters.0007 # Find Silent Sister defiling relative
							days = { 5 7 }
						}
					}
					1 = {
						trigger_event = {
							id = agot_silent_sisters.0005 # Find Silent Sister Aluring
							days = { 2 4 }
						}
					}
				}
			}
		}
	}
}

nw_ranger_death = {
	trigger = {
		any_owned_story = { story_type = nw_ranger_story}
	}
	effect = {
		#Handle proper title history
		title:d_dummy_nw_landless = { copy_title_history = title:d_nw_landless_first_ranger }
		#LC unable to select new FR immediately
		title:k_the_wall.holder = { add_character_flag = fr_assign_block }

		save_scope_as = dead_first_ranger

		ordered_courtier = {
			limit = {
				has_trait = nightswatch
			}
			order_by = prowess
			save_scope_as = ranger_heir
		}
		if = {
			limit = { NOT = { exists = scope:ranger_heir } }
			create_character = {
				location = title:c_castle_black.title_province
				template = agot_black_brother_character
				save_scope_as = ranger_heir
			}
		}
		scope:ranger_heir = {
			remove_trait = nightswatch
			add_trait = nightswatch_temp
		}
		set_designated_heir_unsafe = scope:ranger_heir

		title:k_the_wall.holder = {
			trigger_event = {
				id = agot_nw_ranger_events.0001
				days = 1
			}
		}

		#Player will play as the LC
		if = {
			limit = {
				has_multiple_players = no
				is_ai = no
				has_dlc_feature = landless_playable
			}
			set_player_character = title:k_the_wall.holder
		}
	}
}

nw_ranger_history_on_lc_death = {
	trigger = {
		title:k_the_wall.holder = this
	}
	effect = {
		if = {
			limit = { NOT = { title:k_the_wall.holder = title:d_nw_landless_first_ranger.holder } }
			title:d_dummy_nw_landless = { copy_title_history = title:d_nw_landless_first_ranger }
		}
		title:d_nw_landless_first_ranger.holder = {
			add_character_flag = {
				flag = fr_becomes_lc
				days = 7
			}
			add_character_flag = {
				flag = fr_assign_block
				days = 3
			}
			if = {
				limit = { has_variable = previous_lc }
				remove_variable = previous_lc

				set_variable = {
					name = previous_lc
					value = title:k_the_wall.holder
					days = 40
				}
			}
			else_if = {
				set_variable = {
					name = previous_lc
					value = title:k_the_wall.holder
					days = 40
				}
			}
		}
	}
}

# remove dead ruler from story cycle list and add the new ruler
# change pre_war_liege variable
agot_mw_death_on_action = {
	trigger = {
		OR = {
			has_variable = pre_war_liege
			any_liege_or_above = {
				OR = {
					agot_mw_crown_trigger = yes
					has_variable = pre_war_liege
					agot_mw_rebel_leader_trigger = yes
				}
			}
		}
	}
	effect = {
		### Fetch Scopes ###
		agot_mw_fetch_crown_story_from_char_scope = { CHECK_CHAR = root }
		agot_mw_fetch_rebel_story_from_char_scope = { CHECK_CHAR = root }
		### Fetching Scope End ###

		if = {
			limit = {
				NOT = { exists = scope:mw_crown_story }
			}
			debug_log = "ERROR MW_0100: Failed to fetch scope 'mw_crown_story'"
			debug_log_date = yes
		}
		if = {
			limit = {
				NOT = { exists = scope:mw_rebel_story }
			}
			debug_log = "ERROR MW_0100: Failed to fetch scope 'mw_rebel_story'"
			debug_log_date = yes
		}

		# Update mega war lists if necessary
		if = {
			limit = {
				scope:mw_crown_story ?= {
					OR = {
						is_target_in_variable_list = { name = mw_loyalist_list target = root }
						is_target_in_variable_list = { name = mw_neutral_list target = root }
						is_target_in_variable_list = { name = mw_rebel_leader_list target = root }
					}
				}
			}
			scope:mw_crown_story ?= {
				if = {
					limit = { is_target_in_variable_list = { name = mw_loyalist_list target = root } }

					remove_list_variable = { name = mw_loyalist_list target = root } # remove dead ruler

					if = {
						limit = { exists = root.primary_heir }

						add_to_variable_list = { name = mw_loyalist_list target = root.primary_heir } # add new ruler
					}
				}
				if = {
					limit = { is_target_in_variable_list = { name = mw_neutral_list target = root } }

					remove_list_variable = { name = mw_neutral_list target = root } # remove dead ruler

					if = {
						limit = { exists = root.primary_heir }

						add_to_variable_list = { name = mw_neutral_list target = root.primary_heir } # add new ruler
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:mw_rebel_story ?= {
					is_target_in_variable_list = { name = mw_rebel_supporter_list target = root }
				}
			}
			scope:mw_rebel_story ?= {
				remove_list_variable = { name = mw_rebel_supporter_list target = root } # remove dead ruler
				add_to_variable_list = { name = mw_rebel_supporter_list target = root.primary_heir } # add new ruler
			}
		}

		# Update pre_war_liege if necessary
		if = {
			limit = {
				any_ruler = {
					var:pre_war_liege ?= root
				}
			}

			every_ruler = { # every ruler that has the variable with root as value
				limit = {
					var:pre_war_liege ?= root
				}
				set_variable = { name = pre_war_liege value = root.primary_heir }
			}
		}
		if = {
			limit = {
				exists = var:pre_war_liege
			}

			every_heir = {
				if = {
					limit = {
						any_heir_title = { tier = root.primary_title.tier }
					}
					set_variable = { name = pre_war_liege value = root.var:pre_war_liege }
				}
			}
		}
	}
}