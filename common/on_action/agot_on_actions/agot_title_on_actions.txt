agot_on_title_gain = {
	effect = {
		#Apply silent sister laws
		if = {
			limit = { scope:title = title:d_the_silent_sisterhood }
			if = {
				limit = { NOT = { has_realm_law = female_only_law } }
				add_realm_law_skip_effects = female_only_law
			}
			if = {
				limit = { NOT = { has_government = silent_sisterhood_government } }
				change_government = silent_sisterhood_government
			}
			scope:title = {
				if = {
					limit = { NOT = { has_title_law = silent_sisterhood_succession_law } }
					add_title_law = silent_sisterhood_succession_law
				}
			}
		}

		#Night's Watch landless titles set to black
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					government_has_flag = government_is_nw
				}
				scope:title = title:d_nw_landless_first_ranger
			}
			every_held_title = {
				set_coa = c_castle_black
			}
		}
		#Night's Watch titles set to black
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					government_has_flag = government_is_nw
				}
				has_variable = lc_primary_title
				var:lc_primary_title = scope:title
			}
			save_scope_as = new_lc

			# Set all Night's Watch titles to black
			every_held_title = {
				set_coa = c_castle_black
			}

			# Move old LC courtiers to the new LC
			every_in_list = {
				variable = lc_courtiers
				limit = {
					NOR = {
						is_ruler = yes
						AND = {
							exists = employer
							employer = { has_trait = nightswatch }
						}
						AND = {
							exists = employer
							employer = root
						}
					}
				}
				scope:new_lc = { add_courtier ?= prev }
			}

			# Clear variables
			remove_variable = lc_primary_title
			clear_variable_list = lc_courtiers
			remove_global_variable = nights_watch_temp_realm_succession_law_active

			# Ensure Night's Watch government and succession
			if = {
				limit = {
					NOT = { government_has_flag = government_is_nw }
				}
				change_government = nights_watch_government
				add_realm_law_skip_effects = nights_watch_realm_succession_law
			}

			# Handle First Ranger title
			if = {
				limit = { has_character_flag = nw_ranger_title }
				remove_character_flag = nw_ranger_title
			}
			#First Ranger Title should be handled via event
			if = {
				limit = {
					exists = title:d_nw_landless_first_ranger.holder
					title:d_nw_landless_first_ranger.holder = this
					NOT = { has_character_flag = fr_assign_block }
				}
				add_character_flag = {
					flag = fr_assign_block
					days = 3
				}
			}

			trigger_event = { id = agot_nights_watch.0026 days = 1 }
		}
		#Ruin Handling
		if = {
			limit = {
				OR = {
					scope:title = title:c_ruins
					liege ?= { has_title = title:c_ruins }
				}
			}
			add_trait = ruin
		}
		# Ruins + dragon storage stuff
		if = {
			limit = {
				scope:title = title:c_ruins
			}

			#Death
			if = {
				limit = {
					any_courtier = {
						has_character_flag = dragon_dna_dummy
					}
				}
				debug_log = "AGOT RUIN DIED. TITLE ON_ACTION IF STATEMENT FIRED."
				random_courtier = {
					limit = {
						has_character_flag = dragon_dna_dummy
					}
					every_owned_story = {
						limit = {
							story_type = story_dragon_variable_storage
						}
						make_story_owner = title:c_ruins.holder
						debug_log = "AGOT RUIN DIED. RUINS TRANSFERRED TO RUIN HOLDER."
					}
					death = {
						death_reason = death_vanished
					}
				}
			}

			#Something dumb happened
			if = {
				limit = {
					scope:previous_holder = {
						is_alive = yes
						any_owned_story = {
							story_type = story_dragon_variable_storage
						}
					}
				}
				scope:previous_holder = {
					get_title = title:c_ruins
				}
			}
		}

		#Remove Exiled From Westeros
		if = {
			limit = {
				has_character_flag = exiled_from_westeros
				scope:title = {
					title_province ?= {
						geographical_region = world_westeros_seven_kingdoms
					}
				}
			}
			remove_character_flag = exiled_from_westeros
			if = {
				limit = {
					any_courtier_or_guest = {
						has_character_flag = exiled_from_westeros
					}
				}
				every_courtier_or_guest = {
					limit = {
						has_character_flag = exiled_from_westeros
					}
					remove_character_flag = exiled_from_westeros
				}
			}
		}

		#Ruins COAs
		every_held_title = {
			limit = {
				tier = tier_barony
				title_province = { has_holding_type = ruin_holding }
			}
			set_coa = ruins_coa
		}

		#BTW Struggle
		if = {
			limit = {
				# We are only interested in the title within the Struggle Region
				title:e_beyond_the_wall = {
					any_in_de_jure_hierarchy = {
						this = 	scope:title
					}
				}
				# Only for usurpation
				scope:transfer_type = flag:usurped

				root = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_usurp_title_btw
							CHAR = root
						}
					}
				}
			}
			root = {
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_usurp_title_btw
							CHAR = root
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_usurp_title_btw
						character = root
					}
				}
			}
		}

		#Am I Bronn?
		if = {
			limit = {
				root = character:Blackwater_1
				NOT = {
					house = house:house_Blackwater
				}
			}
			house = { save_scope_as = old_house }
			set_house = house:house_Blackwater
			every_child = {
				limit = { house = scope:old_house }
				set_house = house:house_Blackwater
				every_child = {
					limit = { house = scope:old_house }
					set_house = house:house_Blackwater
					every_child = {
						limit = { house = scope:old_house }
						set_house = house:house_Blackwater
					}
				}
			}
		}

		#Am I Davos?
		if = {
			limit = {
				root = character:Seaworth_1
				NOT = {
					house = house:house_Seaworth
				}
			}
			house = { save_scope_as = old_house }
			set_house = house:house_Seaworth
			every_child = {
				limit = { house = scope:old_house }
				set_house = house:house_Seaworth
				every_child = {
					limit = { house = scope:old_house }
					set_house = house:house_Seaworth
					every_child = {
						limit = { house = scope:old_house }
						set_house = house:house_Seaworth
					}
				}
			}
		}

		#Am I Hard Hugh Hammer?
		if = {
			limit = {
				root = character:Hammer_1
				NOT = {
					house = house:house_Hammer
				}
			}
			house = { save_scope_as = old_house }
			set_house = house:house_Hammer
			every_child = {
				limit = { house = scope:old_house }
				set_house = house:house_Hammer
				every_child = {
					limit = { house = scope:old_house }
					set_house = house:house_Hammer
					every_child = {
						limit = { house = scope:old_house }
						set_house = house:house_Hammer
					}
				}
			}
		}

		#Am I Ulf White?
		if = {
			limit = {
				root = character:White_1
				NOT = {
					house = house:house_White
				}
			}
			house = { save_scope_as = old_house }
			set_house = house:house_White
			every_child = {
				limit = { house = scope:old_house }
				set_house = house:house_White
				every_child = {
					limit = { house = scope:old_house }
					set_house = house:house_White
					every_child = {
						limit = { house = scope:old_house }
						set_house = house:house_White
					}
				}
			}
		}

		#Am I Nettles?
		if = {
			limit = {
				root = character:Farseed_1
				NOT = {
					house = house:house_Farseed
				}
			}
			house = { save_scope_as = old_house }
			set_house = house:house_Farseed
			every_child = {
				limit = { house = scope:old_house }
				set_house = house:house_Farseed
				every_child = {
					limit = { house = scope:old_house }
					set_house = house:house_Farseed
					every_child = {
						limit = { house = scope:old_house }
						set_house = house:house_Farseed
					}
				}
			}
		}

		#Am I Allard?
		if = {
			limit = {
				root = character:Scaly_1
				NOT = {
					house = house:house_Scallard
				}
			}
			house = { save_scope_as = old_house }
			set_house = house:house_Scallard
			every_child = {
				limit = { house = scope:old_house }
				set_house = house:house_Scallard
				every_child = {
					limit = { house = scope:old_house }
					set_house = house:house_Scallard
					every_child = {
						limit = { house = scope:old_house }
						set_house = house:house_Scallard
					}
				}
			}
		}

		#Stannis Rooloo Event
		if = {
			limit = {
				root = character:Baratheon_3
				agot_has_historical_events_trigger = yes
				NOT = { has_character_flag = rooloo_blocker }
			}
			random_list = {
				0 = {
					trigger_event = { id = agot_filler_rhllor.0001 days = { 4000 5500 } } # R'hllor Conversion
					modifier = {
						add = agot_historic_event_chance
					}
				}
				0 = {
					add_character_flag = rooloo_blocker
					modifier = {
						add = agot_nonhistoric_event_chance
						has_game_rule = agot_story_random_events_random_outcomes
					}
				}
			}
		}

		#Iron Throne
		if = {
			limit = { scope:title = title:e_the_iron_throne }
			remove_character_flag = mw_gave_up_crown_after_megawar # To deal if a person who gives it up gets it again
			# Prince title needs to be king if gained
			if = {
				limit = {
					has_nickname = nick_the_rogue_prince
				}
				give_nickname = nick_the_rogue_king
			}
			# Robert is known as usurper if targs take throne back
			if = {
				limit = {
					game_start_date > 8262.10.1 # After Robert is born
					root.house = character:Targaryen_13.house
				}
				scope:title = {
					every_past_holder = {
						limit = {
							this = character:Baratheon_2
						}
						give_nickname = nick_the_usurper
					}
				}
			}
			# If this character / their vassal owns the other kingdoms, transfer their de jure and destroy
			every_held_title = {
				limit = {
					NOT = { this = title:e_the_iron_throne }
					tier = tier_empire
					title_capital_county.title_province = { geographical_region = world_westeros_seven_kingdoms }
					save_temporary_scope_as = de_jure_empire
					root = { completely_controls = scope:de_jure_empire }
				}
				ordered_in_de_jure_hierarchy = {
					limit = { tier = tier_kingdom }
					set_de_jure_liege_title = title:e_the_iron_throne
				}
				root = {
					destroy_title = prev
				}
			}
			every_empire = {
				limit = {
					NOT = { this = title:e_the_iron_throne }
					title_capital_county.title_province = { geographical_region = world_westeros_seven_kingdoms }
					save_temporary_scope_as = de_jure_empire
					root = { completely_controls = scope:de_jure_empire }
				}
				ordered_in_de_jure_hierarchy = {
					limit = { tier = tier_kingdom }
					set_de_jure_liege_title = title:e_the_iron_throne
				}
				if = { # This should be rare, but it's possible to have a title that owns 0% of its de jure land, in which case kill it
					limit = { exists = holder }
					holder = {
						destroy_title = prev
					}
				}
			}
		}
		#Pirates
		if = {
			limit = {
				scope:transfer_type = flag:created
				is_alive = yes
				has_government = pirate_government
				scope:title.tier > tier_county
			}
			scope:title = { add_title_law = pirate_succession_law }
		}

		#Slavery
		if = {
			limit = {
				agot_has_slave_population_trigger = yes
			}
			trigger_event = {
				id = agot_slavery.0001
				days = 1
			}
		}

		#Free Cities
		if = {
			limit = {
				has_realm_law = free_city_election_succession_law
			}

			scope:title = { save_scope_as = term_limit_country }

			if = {
				limit = {
					OR = {
						scope:term_limit_country.title_capital_county = { has_title_law = magisterial_attached_titles_law }
						scope:term_limit_country.title_capital_county.duchy = { has_title_law = magisterial_attached_titles_law }
					}
				}

				create_title_and_vassal_change = {
					type = election
					save_scope_as = title_change
					add_claim_on_loss = no
				}
				if = {
					limit = {
						scope:term_limit_country.title_capital_county = { has_title_law = magisterial_attached_titles_law }
						NOT = { has_title = scope:term_limit_country.title_capital_county }
					}
					scope:term_limit_country.title_capital_county = {
						change_title_holder = {
							holder = root
							change = scope:title_change
						}
					}
				}
				if = {
					limit = {
						scope:term_limit_country.title_capital_county.duchy = { has_title_law = magisterial_attached_titles_law }
						NOT = { has_title = scope:term_limit_country.title_capital_county.duchy }
					}
					scope:term_limit_country.title_capital_county.duchy = {
						change_title_holder = {
							holder = root
							change = scope:title_change
						}
					}
				}
				resolve_title_and_vassal_change = scope:title_change
			}
		}

		#Governments
		if = {
			limit = {
				has_government = ruins_government
				NOT = { top_liege = title:c_ruins.holder }
				any_held_county = {
					any_county_province = {
						has_holding_type = castle_holding
						barony = {
							NOT = { is_capital_barony = yes }
						}
					}
				}
			}
			random_held_county = {
				limit = {
					any_county_province = {
						has_holding_type = castle_holding
					}
				}
				random_county_province = {
					limit = {
						has_holding_type = castle_holding
					}
					county.holder = { save_scope_as = county_holder }

					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					barony = {
						change_title_holder = {
							holder = scope:county_holder
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					barony = { set_capital_barony = yes }
					root = { set_realm_capital = prev.county }
				}
			}
		}
		else_if = { # Things that don't change government
			limit = {
				OR = {
					has_government = ruins_government # Ruins don't change government
					scope:transfer_type = flag:created # Creating a title doesn't change government
					any_held_title = { # If gained a title of existing tier or lower, don't change government
						tier >= scope:title.tier
						count > 1
					}
				}
			}
			#Do Nothing
		}
		# If we pass this, then we didn't make the title and it's higher than any of our others
		else_if = {
			limit = {
				NOT = { has_government = pirate_government }
				agot_is_valid_pirate_government_target = yes
				scope:title = {
					kingdom = title:k_the_stepstones
				}
			}
			change_government = pirate_government
		}
		else_if = { #AGOT FreeCityPlaceholder
			limit = {
				NOT = { has_government = administrative_government }
				agot_is_valid_free_city_government_target = yes
				top_liege ?= {has_realm_law = free_city_election_succession_law}
			}
			change_government = administrative_government
		}
		else_if = {
			limit = {
				NOT = { has_government = lp_feudal_government }
			}
			if = { # If can just change, do so
				limit = { agot_is_valid_lp_feudal_government_target = yes }
				change_government = lp_feudal_government
			}
			if = { # Now, special case for weird inheritence of IT by non-feudal
				limit = { # If I have gotten the Iron Throne + capital and I am not feudal
					scope:title = title:e_the_iron_throne
					has_title = title:e_the_iron_throne.title_capital_county
					NOR = {
						has_government = theocracy_government
						has_government = republic_government
						has_government = kingsguard_government
						has_government = ruins_government
						government_has_flag = government_is_administrative
					}
				}
				set_realm_capital = scope:title.title_capital_county
				change_government = lp_feudal_government
			}
		}

		#Dragonpits
		if = {
			limit = {
				has_variable_list = banned_dragonpit_locations
				is_target_in_variable_list = {
					name = banned_dragonpit_locations
					target = scope:title
				}
			}
			remove_list_variable = {
				name = banned_dragonpit_locations
				target = scope:title
			}
		}

		# Legitimate houses
		if = {
			limit = {
				scope:title = { title_uses_legitimate_house_mechanic = yes }
			}
			if = { # Is this a shattered world start case?
				limit = { scope:title = { has_variable = shattered_world_start } }
				agot_set_current_house = {
					TITLE = scope:title
					HOUSE = scope:title.holder.house
				}
				agot_set_legitimate_house = {
					TITLE = scope:title
					HOUSE = scope:title.holder.house
				}
				agot_set_new_house_progress = {
					TITLE = scope:title
					PROGRESS = 100
				}
				remove_variable = shattered_world_start
			}
			else_if = { # Have we changed houses to an illegitimate house?
				limit = {
					scope:title = {
						NOT = { var:current_house = root.house }
						NOT = { var:legitimate_house = root.house }
					}
				}
				agot_set_current_house = {
					TITLE = scope:title
					HOUSE = root.house
				}
				agot_set_new_house_progress = {
					TITLE = scope:title
					PROGRESS = 0
				}
				if = { # Did we change from a legitimate house to an illegitimate house?
					limit = {
						exists = scope:previous_holder
						scope:previous_holder.house = scope:title.var:legitimate_house
					}
					every_player = {
						limit = {
							NOT = { this = root } # I think they know
						}
						trigger_event = {
							id = agot_legitimate_house.0003
							days = 1
						}
					}
				}
			}
			else_if = { # Have we stuck with the same illegitimate house?
				limit = {
					scope:title = {
						var:current_house = root.house
						NOT = { var:legitimate_house = root.house }
					}
				}
				send_interface_message = {
					type = msg_lh_inheritance_bad
					title = msg_inherited_illegitimate_title
					desc = msg_inherited_illegitimate_title_desc
					add_legitimacy_effect = { LEGITIMACY = medium_legitimacy_loss }
					if = {
						limit = {
							exists = scope:title.var:legitimate_house.house_head
							scope:title.var:legitimate_house.house_head = {
								NOR = {
									has_trait = humble
									has_trait = content
								}
							}
						}
						progress_towards_rival_effect = {
							CHARACTER = scope:title.var:legitimate_house.house_head
							REASON = rival_has_my_legitimate_house_title
							OPINION = 0
						}
					}
					left_icon = root
					right_icon ?= scope:previous_holder
				}
			}
			else_if = { # Is the new holder the legitimate house?
				limit = {
					scope:title.var:legitimate_house = root.house
				}
				if = {
					limit = { NOT = { scope:title.var:current_house = root.house } }
					agot_set_current_house = {
						TITLE = scope:title
						HOUSE = root.house
					}
				}
				if = {
					limit = { NOT = { scope:title.var:new_house_progress = 100 } }
					agot_set_new_house_progress = {
						TITLE = scope:title
						PROGRESS = 100
					}
				}
				send_interface_message = {
					type = msg_lh_inheritance_good
					title = msg_inherited_legitimate_title
					desc = msg_inherited_legitimate_title_desc
					add_legitimacy_effect = { LEGITIMACY = medium_legitimacy_gain }
					if = {
						limit = { scope:title.tier = tier_kingdom }
						dynasty = { add_dynasty_prestige = minor_prestige_value }
					}
					else_if = {
						limit = { scope:title.tier = tier_empire }
						dynasty = { add_dynasty_prestige = medium_prestige_value }
					}
					left_icon = root
					right_icon ?= scope:previous_holder
				}
			}
		}
		#If doesn't have legitimate title var (custom created titles for example), do things that make sense
		if = {
			limit = {
				NOT = { scope:title = { has_variable = legitimate_house_title } }
			}
			# Should it have a legitimate house mechanic?
			scope:title = {
				if = {
					limit = {
						tier >= tier_kingdom # Is it a kingdom or higher?
						root.capital_province = { # Is it in the Seven Kingdoms? - Note this is the new capital as that's how the script makes new titles
							geographical_region = world_westeros_seven_kingdoms
							NOT = { geographical_region = world_westeros_the_wall } # But not the Wall
						}
					}
					set_variable = { # Enable the mechanic for this title
						name = legitimate_house_title
						value = 1
					}
					set_variable = { # Set the progress to 0 by default
						name = new_house_progress
						value = 0
					}
					add_to_global_variable_list = { # Add it to the list of titles that have the mechanic
						name = legitimate_house_titles
						target = this
					}
					set_variable = { # Set the current house to the holder's house
						name = current_house
						value = root.house
					}
					# If it doesn't have a legitimate house already, set it to the holder's house
					if = {
						limit = { NOT = { has_variable = legitimate_house } }
						set_variable = {
							name = legitimate_house
							value = root.house
						}
						set_variable = {
							name = new_house_progress
							value = 100
						}
					}
					else = { # If it does, check if it's the same as the holder's house and set the progress accordingly
						# Note: this shouldn't happen, but just in case
						if = {
							limit = { var:legitimate_house = root.house }
							set_variable = {
								name = new_house_progress
								value = 100
							}
						}
						else = {
							set_variable = {
								name = new_house_progress
								value = 0
							}
						}
					}
				}
				else = { # If not appropriate, set it to 0 so it's marked as not having the mechanic
					set_variable = {
						name = legitimate_house_title
						value = 0
					}
				}
			}
		}

		#Banking
		dissolve_conquered_bank = yes

		#Set Birthplace if it was not set already
		agot_birthplace_effect = yes
	}
	on_actions = {
		agot_on_title_gain_mega_wars_action
	}
}

agot_on_title_gain_inheritance = {
	effect = {
		if = {
			limit = {
				scope:title = {
					OR = {
						is_outpost_county = yes
						is_command_county = yes
					}
				}
			}

			create_title_and_vassal_change = {
				type = returned
				save_scope_as = title_change
				add_claim_on_loss = no
			}

			scope:title = {
				change_title_holder = {
					holder = duchy.holder
					change = scope:title_change
				}
			}

			resolve_title_and_vassal_change = scope:title_change
		}

		# Returns Dragonstone to the Iron Throne
		if = {
			limit = {
				exists = title:e_the_iron_throne.holder
				title:e_the_iron_throne.holder = {
					has_variable_list = dragonstone_titles
				}
				#dynasty = dynasty:dynn_Targaryen
				OR = {
					has_title = title:k_dragonstone
					NOT = { exists = title:k_dragonstone.holder }
				}
				has_title = title:d_dragonstone
				has_title = title:c_dragonstone
				title:e_the_iron_throne.holder ?= {
					exists = dynasty
					dynasty = dynasty:dynn_Targaryen
				}
				NOT = {
					this = title:e_the_iron_throne.holder
				}
			}
			create_title_and_vassal_change = {
				type = returned
				save_scope_as = dragonstone_change
				add_claim_on_loss = no
			}
			title:e_the_iron_throne.holder = { clear_variable_list = dragonstone_titles }
			title:c_dragonstone = {
				change_title_holder_include_vassals = {
					holder = title:e_the_iron_throne.holder
					change = scope:dragonstone_change
				}
				copy_title_history = title:k_dummy_dragonstone
			}
			title:d_dragonstone = {
				change_title_holder_include_vassals = {
					holder = title:e_the_iron_throne.holder
					change = scope:dragonstone_change
				}
				copy_title_history = title:k_dummy_dragonstone
			}
			title:k_dragonstone = {
				change_title_holder_include_vassals = {
					holder = title:e_the_iron_throne.holder
					change = scope:dragonstone_change
				}
				copy_title_history = title:k_dummy_dragonstone
			}

			title:k_dragonstone = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						holder.house = root.house
						NOT = { this = title:c_dragonstone }
					}

					change_title_holder_include_vassals = {
						holder = title:e_the_iron_throne.holder
						change = scope:dragonstone_change
					}
				}
			}
			resolve_title_and_vassal_change = scope:dragonstone_change
			if = {
				limit = {
					NOR = {
						is_landed = yes
						is_landless_adventurer = yes
					}
					NOT = { has_character_flag = marked_for_termination }
				}
				title:e_the_iron_throne.holder = { add_courtier ?= prev }
			}
			else_if = {
				limit = {
					has_character_flag = marked_for_termination
				}
				death = {
					death_reason = death_vanished
				}
			}
			if = {
				limit = {
					title:k_dragonstone = { title_uses_legitimate_house_mechanic = yes }
				}
				agot_set_current_house = {
					TITLE = title:k_dragonstone
					HOUSE = title:e_the_iron_throne.holder.house
				}
			}
		}

		#AGOT Added
		if = {
			limit = { scope:title = title:d_the_silent_sisterhood }
			if = {
				limit = { NOT = { has_realm_law = female_only_law } }
				add_realm_law_skip_effects = female_only_law
			}
			if = {
				limit = { NOT = { has_government = silent_sisterhood_government } }
				change_government = silent_sisterhood_government
			}
			scope:title = {
				if = {
					limit = { NOT = { has_title_law = silent_sisterhood_succession_law } }
					add_title_law = silent_sisterhood_succession_law
				}
			}
		}
	}
}

agot_on_title_gain_usurpation = {
	effect = {
		#AGOT Added
		if = {
			limit = { # BTW
				# We are only interested in the title within the Struggle Region
				title:e_beyond_the_wall = {
					any_in_de_jure_hierarchy = {
						this = 	scope:title
					}
				}
				# Only for usurpation
				scope:transfer_type = flag:usurped

				root = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_usurp_title_btw
							CHAR = root
						}
					}
				}
			}
			root = {
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_usurp_title_btw
							CHAR = root
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_usurp_title_btw
						character = root
					}
				}
			}
		}
	}
}

agot_on_explicit_claim_gain = {
	effect = {
		#AGOT Added
		if = {
			limit = {
				NOT = { scope:transfer_type = flag:inheritance }

				title:e_beyond_the_wall = {
					any_in_de_jure_hierarchy = {
						this = 	scope:title
					}
				}
				root = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_gain_claim_on_title_btw
							CHAR = root
						}
					}
				}
			}
			root = {
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_gain_claim_on_title_btw
							CHAR = root
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_gain_claim_on_title_btw
						character = root
					}
				}
			}
		}
	}
}

agot_on_title_gain_iron_throne = {
	trigger = {
		scope:title = {
			this = title:e_the_iron_throne
		}
		has_government = feudal_government
	}
	effect = {
		change_government = lp_feudal_government
	}
}

agot_on_title_gain_black_brother_iron_throne = {
	trigger = {
		scope:title = {
			this = title:e_the_iron_throne
		}
		has_trait = nightswatch
	}
	effect = {
		remove_trait = nightswatch
	}
}

agot_on_title_gain_iron_throne_dragonstone = {
	trigger = {
		scope:title = {
			this = title:e_the_iron_throne
		}
		dynasty = dynasty:dynn_Targaryen
	}
	effect = {
		trigger_event = {
			id = agot_dragonstone.0003
			days = 2
		}
	}
}

agot_on_title_inheritance_lannister_baratheon_coa = {
	trigger = {
		scope:title = {
			this = title:e_the_iron_throne
		}
		root = {
			dynasty = dynasty:dynn_Baratheon
			father = character:Baratheon_2
			mother = character:Lannister_6
			real_father = character:Lannister_7
		}
	}
	effect = {
		set_house = house:house_BaratheonKL
		every_close_family_member = {
			if = {
				limit = {
					dynasty = dynasty:dynn_Baratheon
					father = character:Baratheon_2
					mother = character:Lannister_6
					NOR = {
						has_trait = bastard
					}
				}
				set_house = house:house_BaratheonKL
				every_child = {
					if = {
						limit = {
							dynasty = dynasty:dynn_Baratheon
						}
						set_house = house:house_BaratheonKL
					}
				}
			}
		}
		every_held_title = {
			set_coa = root.house
		}
	}
}


agot_on_title_gain_iron_throne_kingslanding = {
	trigger = {
		scope:title = {
			tier = tier_county
			duchy = title:d_kings_landing
			NOT = { this = title:c_kings_landing }
		}
		dynasty = dynasty:dynn_Targaryen
		is_ai = yes
	}
	effect = {
		trigger_event = {
			id = agot_dragonstone.0005
			days = 1
		}
	}
}

agot_on_title_gain_nightswatch = {
	trigger = {
		OR = {
			government_has_flag = government_is_nw
			any_liege_or_above = {
				government_has_flag = government_is_nw
			}
		}
		NOT = { has_government = republic_government }
	}
	effect = {
		agot_debug_log_effect = { MSG = agot_debug_msg_on_title_gain_nightswatch }

		if = {
			limit = {
				NOR = {
					has_trait = nightswatch
					has_trait = nightswatch_temp
				}
			}
			agot_add_to_nightswatch_effect = yes
		}

		if = {
			limit = {
				has_trait = nightswatch
				has_trait_xp = {
					trait = nightswatch
					value < 100
				}
				age > 15
			}
			trigger_event = agot_nightswatch_maintenance.0101
		}

		every_courtier = {
			if = {
				limit = { is_female = yes }
				move_to_pool_at = title:d_winterfell.holder.capital_province
			}
			else_if = {
				limit = {
					is_human = yes
					NOT = {
						has_trait = nightswatch
					}
				}
				agot_add_to_nightswatch_effect = yes
			}

			if = {
				limit = {
					has_trait = nightswatch
					has_trait_xp = {
						trait = nightswatch
						value < 100
					}
					age > 15
				}
				trigger_event = agot_nightswatch_maintenance.0101
			}
		}

		if = {
			limit = {
				NOT = { government_has_flag = government_is_nw }
			}
			change_government = nights_watch_government
		}
	}
}

agot_on_title_gain_silent_sister = {
	trigger = {
		has_government = silent_sisterhood_government
	}
	effect = {
		every_courtier_or_guest = {
			if = {
				limit = {
					NOT = { has_trait = silent_sister }
				}
				if = {
					limit = {
						exists = father.liege_or_court_owner
					}
					move_to_pool_at = father.liege_or_court_owner.capital_province
				}
				else_if = {
					limit = {
						exists = mother.liege_or_court_owner
					}
					move_to_pool_at = mother.liege_or_court_owner.capital_province
				}
				else = {
					move_to_pool_at = title:c_oldtown.holder.capital_province
				}
			}
			else_if = {
				limit = {
					NOT = { has_trait = silent_sister }
				}
				agot_add_to_silent_sisters_effect = yes
			}
		}
	}
}

agot_on_title_gain_citadel = {
	trigger = {
		trigger_if = {
			limit = {
				exists = global_var:citadel_title
			}
			scope:title = global_var:citadel_title
		}
		trigger_else = {
			scope:title = title:b_the_citadel
		}
	}
	effect = {
		title:b_the_citadel = { set_coa = b_the_citadel }
		if = {
			limit = {
				NOT = {
					has_trait = archmaester
				}
			}

			random_living_maester = {
				limit = {
					has_trait = archmaester
				}
				save_scope_as = new_seneschal
			}

			root = {
				create_title_and_vassal_change = {
					type = granted
					save_scope_as = change
					add_claim_on_loss = no
				}

				global_var:citadel_title = {

					change_title_holder = {
						holder = scope:new_seneschal
						change = scope:change
						take_baronies = yes
					}
				}

			}
			resolve_title_and_vassal_change = scope:change
			#Name is unintuitive, but it has the trigger for moving maesters to court
			trigger_event = {
				on_action = agot_citadel_find_lost_maesters
				days = 0
			}
			trigger_event = {
				id = agot_maester.9011
				days = 1
			}
		}
		else = {
			save_scope_as = new_seneschal
			# Readd maester experience
			add_trait = maester
			add_trait_xp = {
				trait = maester
				value = 100
			}

			# Make them whole again
			if = {
				limit = { has_variable = is_disinherited }
				add_trait = disinherited
			}
			if = {
				limit = { has_variable = is_eunuch }
				add_trait = eunuch_1
			}
			if = {
				limit = { has_variable = is_beardless_eunuch }
				add_trait = beardless_eunuch
			}
			if = {
				limit = { has_variable = is_devoted }
				add_trait = devoted
			}
			if = {
				limit = { has_variable = is_order_member }
				add_trait = order_member
			}
			if = {
				limit = { has_variable = is_bastard }
				add_trait = bastard
			}
			if = {
				limit = { has_variable = is_bastard_founder }
				add_trait = bastard_founder
			}

			every_in_list = {
				variable = citadel_courtiers
				limit = {
					is_alive = yes
				}

				if = {
					limit = {
						has_character_flag = blocked_from_leaving
					}
					remove_character_flag = blocked_from_leaving
				}
				if = {
					limit = {
						NOT = {
							is_courtier_of = global_var:citadel_title.holder
						}
					}
					global_var:citadel_title.holder = {
						add_courtier = prev
					}
				}
				if = {
					limit = { # Trying to avoid dragon issues
						is_human = yes
					}
					add_character_flag = blocked_from_leaving
				}
			}
			clear_variable_list = citadel_courtiers
		}

		global_var:citadel_title.holder = {
			change_government = the_citadel_government
		}
	}
}

agot_on_title_gain_high_valyrian = {
	trigger = {
		culture = culture:high_valyrian
		exists = scope:previous_holder
		scope:previous_holder.culture = culture:high_valyrian
		NOT = { has_game_rule = agot_hv_conversion_unrestricted }
		this = dynasty.dynast
		NOT = { has_trait = bastard }
		NOT = { has_trait = bastard_founder }
		dynasty = {
			any_dynasty_member = {
				count = 1
			}
		}
		is_ai = yes
		NOT = { is_from_ruler_designer = yes }
		NOT = { has_character_flag = changed_face_short }
	}
	effect = {
		if = {
			limit = {
				has_game_rule = agot_hv_conversion_offshoots
				scope:title.title_province = { geographical_region = world_westeros }
			}
			set_culture = culture:westerosi_valyrian
		}
		else_if = {
			limit = {
				has_game_rule = agot_hv_conversion_offshoots
				NOT = {
					scope:title.title_province = { geographical_region = world_westeros }
				}
			}
			set_culture = culture:essosi_valyrian
		}
		else_if = {
			limit = {
				has_game_rule = agot_hv_conversion_disallowed
			}
			set_culture = scope:title.culture
		}
	}
}

agot_on_title_gain_kingsguard = { # This only works if the previous owner has a title to fall back on, and thus, has a court
	trigger = {
		scope:title = {
			has_variable = kingsguard
		}
	}
	effect = {
		if = {
			limit = {
				scope:title = {
					exists = var:kingsguard_lord_commander
				}
			}
			add_courtier ?= scope:title.var:kingsguard_lord_commander
			assign_councillor_type = {
				type = kingsguard_lord_commander
				target = scope:title.var:kingsguard_lord_commander
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:kingsguard_1
				}
			}
			add_courtier ?= scope:title.var:kingsguard_1
			assign_councillor_type = {
				type = kingsguard_1
				target = scope:title.var:kingsguard_1
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:kingsguard_2
				}
			}
			add_courtier ?= scope:title.var:kingsguard_2
			assign_councillor_type = {
				type = kingsguard_2
				target = scope:title.var:kingsguard_2
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:kingsguard_3
				}
			}
			add_courtier ?= scope:title.var:kingsguard_3
			assign_councillor_type = {
				type = kingsguard_3
				target = scope:title.var:kingsguard_3
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:kingsguard_4
				}
			}
			add_courtier ?= scope:title.var:kingsguard_4
			assign_councillor_type = {
				type = kingsguard_4
				target = scope:title.var:kingsguard_4
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:kingsguard_5
				}
			}
			add_courtier ?= scope:title.var:kingsguard_5
			assign_councillor_type = {
				type = kingsguard_5
				target = scope:title.var:kingsguard_5
			}
		}
		if = {
			limit = {
				scope:title = {
					exists = var:kingsguard_6
				}
			}
			add_courtier ?= scope:title.var:kingsguard_6
			assign_councillor_type = {
				type = kingsguard_6
				target = scope:title.var:kingsguard_6
			}
		}
	}
}

agot_on_title_gain_goldcloaks = {
	effect = {
		#court position assignment
		if = {
			limit = {
				scope:title = title:b_goldguard_heights
			}
			title:b_goldguard_heights = { set_coa = b_goldguard_heights }
			title:c_kings_landing.holder = {
				if = {
					limit = {
						NOT = { title:b_goldguard_heights.holder = title:c_kings_landing.holder }
					}
					appoint_court_position = {
						recipient = title:b_goldguard_heights.holder
						court_position = goldcloaks_court_position
					}
				}
			}
		}
	}
}

agot_on_title_gain_high_septon = {
	trigger = {
		scope:title = {
			this = title:k_the_most_devout
		}
	}
	effect = {
		agot_assign_high_septon_effect = yes
		agot_assign_high_septon_nickname_effect = yes
	}
}

agot_on_title_gain_iron_throne_appoint_high_septon = {
	trigger = {
		scope:title = {
			this = title:e_the_iron_throne
		}
		exists = title:k_the_most_devout.holder
		exists = faith.religious_head
		faith.religious_head = title:k_the_most_devout.holder
		NAND = {
			exists = cp:councillor_court_chaplain
			cp:councillor_court_chaplain = title:k_the_most_devout.holder
		}
	}
	effect = {
		title:e_the_iron_throne.holder = {

			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
			}
			title:k_the_most_devout.holder = {
				change_liege = {
					liege = title:e_the_iron_throne.holder
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}

			create_title_and_vassal_change = {
				type = granted
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			title:b_visenyas_hill = {
				change_title_holder_include_vassals = {
					holder = title:k_the_most_devout.holder
					change = scope:title_change
				}
				resolve_title_and_vassal_change = scope:title_change
			}

			if = {
				limit = {
					exists = cp:councillor_court_chaplain
				}
				set_variable = {
					name = setting_up_high_septon
					value = yes
					days = 1
				}
				fire_councillor = cp:councillor_court_chaplain
			}
			assign_councillor_type = {
				type = councillor_court_chaplain
				target = title:k_the_most_devout.holder
			}
		}
	}
}

agot_on_title_gain_moat_cailin = {
	trigger = {
		scope:previous_holder ?= { has_character_flag = rebuilding_moat_cailin }
		scope:title = title:c_moat_cailin
	}
	effect = {
		add_character_flag = rebuilding_moat_cailin
		scope:previous_holder = { remove_character_flag = rebuilding_moat_cailin }
	}
}

agot_on_title_lost_iron_throne = {
	trigger = {
		scope:title = {
			this = title:e_the_iron_throne
		}
	}
	effect = {
		every_councillor = {
			limit = { has_variable = small_council }
			fire_small_councillor = yes
		}
	}
}

agot_on_title_lost_nightswatch = {
	trigger = {
		has_trait = nightswatch
	}
	effect = {
		every_living_black_brother = {
			limit = { #yeet black brothers back to wall AGAIN
				is_ruler = no
				NOR = {
					exists = employer
					AND = {
						exists = employer
						employer = { has_trait = nightswatch }
					}
				}
			}
			if = {
				limit = {
					NOT = { is_in_pool_at = title:k_the_wall.holder.capital_province }
				}
				move_to_pool_at = title:k_the_wall.holder.capital_province
			}
			if = {
				limit = {
					NOT = { employer = title:k_the_wall.holder }
				}
				set_employer = title:k_the_wall.holder
			}
		}

		if = {
			limit = {
				has_title = title:k_the_wall
				capital_county = title:c_moles_town
				capital_province = { has_holding_type = city_holding }
			}
			title:c_moles_town = {
				random_county_province = {
					limit = {
						has_holding_type = castle_holding
					}
					county.holder = { save_scope_as = county_holder }

					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					barony = {
						change_title_holder = {
							holder = scope:county_holder
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					barony = { set_capital_barony = yes }
				}
			}
			change_government = nights_watch_government
		}
	}
}

agot_on_title_lost_silent_sister = {
	trigger = {
		has_trait = silent_sister
	}
	effect = {
		every_living_silent_sister = {
			limit = {
				is_ruler = no
				NOR = {
					exists = employer
					AND = {
						exists = employer
						employer = { has_trait = silent_sister }
					}
				}
			}
			if = {
				limit = {
					NOT = { is_in_pool_at = title:c_oldtown.title_province }
				}
				move_to_pool_at = title:c_oldtown.title_province
			}
			if = {
				limit = {
					NOT = { employer = title:d_the_silent_sisterhood.holder }
				}
				set_employer = title:d_the_silent_sisterhood.holder
			}
		}
	}
}

agot_on_title_gain_wildfire = {
	trigger = {
		exists = scope:previous_holder
		scope:previous_holder = {
			has_character_flag = kingslanding_will_resolve_soon
		}
		scope:title = {
			this = title:e_the_iron_throne
		}
	}
	effect = {
		add_character_flag = kingslanding_will_resolve_soon
		trigger_event = {
			id = agot_events_rr_minor.0121
			months = { 1 2 }
		}
	}
}

agot_on_title_gain_ruins = {
	trigger = {
		has_government = ruins_government
		NOT = {
			capital_province ?= { has_holding_type = ruin_holding }
		}
	}
	effect = {
		if = {
			limit = {
				agot_is_valid_lp_feudal_government_target = yes
			}
			change_government = lp_feudal_government
		}
	}
}

agot_on_title_gain_unique_crown = {
	trigger = {
		AND = {
			OR = {
				primary_title.tier = tier_empire
				AND = {
					primary_title.tier = tier_kingdom
					agot_is_independent_ruler = yes
				}
			}
			OR = {
				agot_aegon_i_crown_trigger = yes
				agot_aenys_crown_trigger = yes
				agot_jaehaerys_crown_trigger = yes
				agot_aegon_iii_crown_trigger = yes
				agot_baelors_crown_trigger = yes
				agot_aegon_iv_crown_trigger = yes
				agot_maekars_crown_trigger = yes
				agot_daenerys_crown_trigger = yes
				agot_robertI_crown_trigger = yes
				agot_stannis_crown_trigger = yes
				agot_renly_crown_trigger = yes
				agot_joffreyI_crown_trigger = yes
				agot_jeyne_westerling_crown_trigger = yes
				agot_lyanna_crown_trigger = yes
				agot_rhaella_crown_trigger = yes
				agot_night_king_crown_trigger = yes
				agot_ice_crown_trigger = yes
			}
			NOT = { has_character_flag = has_had_event_agot_commission_crown.0005 }
			NOT = { government_has_flag = government_is_nw }
			NOT = { has_government = silent_sisterhood_government }
		}
	}
	effect = {
		trigger_event = agot_commission_crown.0005
	}
}

agot_on_title_gain_tyroshi_landing = {
	trigger = {
		scope:title = title:c_uhyrosh_coast
		culture = {
			NOT = {
				this = culture:tyroshi
				any_parent_culture_or_above = {
					this = culture:tyroshi
				}
			}
		}
		exists = scope:previous_holder
		scope:previous_holder.culture = {
			OR = {
				this = culture:tyroshi
				any_parent_culture_or_above = {
					this = culture:tyroshi
				}
			}
		}
	}
	effect = {
		scope:title = { reset_title_name = yes }
	}
}

agot_on_title_gain_uhyrosh_coast = {
	trigger = {
		scope:title = title:c_uhyrosh_coast
		culture = {
			OR = {
				this = culture:tyroshi
				any_parent_culture_or_above = {
					this = culture:tyroshi
				}
			}
		}
		exists = scope:previous_holder
		scope:previous_holder.culture = {
			NOT = {
				this = culture:tyroshi
				any_parent_culture_or_above = {
					this = culture:tyroshi
				}
			}
		}
	}
	effect = {
		scope:title = { set_title_name = c_tyroshi_landing }
	}
}

agot_on_title_gain_lp_destroy = {
	trigger = {
		OR = {
			AND = {
				scope:title = title:e_dorne
				root ?= title:k_dorne.holder
			}
			AND = {
				scope:title = title:e_the_iron_islands
				root ?= title:k_the_iron_islands.holder
			}
			AND = {
				scope:title = title:e_the_north
				root ?= title:k_the_north.holder
			}
			AND = {
				scope:title = title:e_the_reach
				root ?= title:k_the_reach.holder
			}
			AND = {
				scope:title = title:e_the_riverlands
				root ?= title:k_the_riverlands.holder
			}
			AND = {
				scope:title = title:e_the_stormlands
				root ?= title:k_the_stormlands.holder
			}
			AND = {
				scope:title = title:e_the_vale
				root ?= title:k_the_vale.holder
			}
			AND = {
				scope:title = title:e_the_westerlands
				root ?= title:k_the_westerlands.holder
			}
			AND = {
				scope:title = title:e_blackwater_bay
				root ?= title:k_the_crownlands.holder
			}
		}
	}
	effect = {
		if = {
			limit = {
				scope:title = title:e_dorne
				root ?= title:k_dorne.holder
			}
			destroy_title = title:k_dorne
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_dorne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_the_iron_islands
				root ?= title:k_the_iron_islands.holder
			}
			destroy_title = title:k_the_iron_islands
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_islands.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_the_north
				root ?= title:k_the_north.holder
			}
			destroy_title = title:k_the_north
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_the_north.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_the_reach
				root ?= title:k_the_reach.holder
			}
			destroy_title = title:k_the_reach
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_the_reach.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_the_riverlands
				root ?= title:k_the_riverlands.holder
			}
			destroy_title = title:k_the_riverlands
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_the_riverlands.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_the_stormlands
				root ?= title:k_the_stormlands.holder
			}
			destroy_title = title:k_the_stormlands
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_the_stormlands.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_the_vale
				root ?= title:k_the_vale.holder
			}
			destroy_title = title:k_the_vale
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_the_vale.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_the_westerlands
				root ?= title:k_the_westerlands.holder
			}
			destroy_title = title:k_the_westerlands
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_the_westerlands.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				scope:title = title:e_blackwater_bay
				root ?= title:k_the_crownlands.holder
			}
			destroy_title = title:k_the_crownlands
			add_legitimacy = 50
			every_vassal = {
				remove_opinion = {
					target = title:e_blackwater_bay.holder
					modifier = destroyed_title
				}
			}
		}
	}
}

agot_on_title_gain_iron_throne_created = {
	trigger = {
		scope:title = { this = title:e_the_iron_throne }
		OR = {
			has_title = title:e_dorne
			has_title = title:e_the_iron_islands
			has_title = title:e_the_north
			has_title = title:e_the_reach
			has_title = title:e_the_riverlands
			has_title = title:e_the_stormlands
			has_title = title:e_the_vale
			has_title = title:e_the_westerlands
			has_title = title:e_blackwater_bay
		}
	}
	effect = {
		if = {
			limit = {
				has_title = title:e_dorne
			}
			title:e_dorne = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_dorne
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_dorne = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_dorne.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_the_iron_islands
			}
			title:e_the_iron_islands = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_the_iron_islands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_iron_islands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_iron_islands.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_the_north
			}
			title:e_the_north = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_the_north
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_north = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_north.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_the_reach
			}
			title:e_the_reach = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_the_reach
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_reach = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_reach.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_the_riverlands
			}
			title:e_the_riverlands = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_the_riverlands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_riverlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_riverlands.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_the_stormlands
			}
			title:e_the_stormlands = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_the_stormlands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_stormlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_stormlands.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_the_vale
			}
			title:e_the_vale = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_the_vale
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_vale = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_vale.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_the_westerlands
			}
			title:e_the_westerlands = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_the_westerlands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_westerlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_westerlands.holder
					modifier = destroyed_title
				}
			}
		}
		if = {
			limit = {
				has_title = title:e_blackwater_bay
			}
			title:e_blackwater_bay = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
					}
					set_de_jure_liege_title = title:e_the_iron_throne
				}
			}
			destroy_title = title:e_blackwater_bay
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_crownlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:k_the_crownlands.holder
					modifier = destroyed_title
				}
			}
		}
	}
}

agot_on_title_gain_iron_throne_reconquer = {
	trigger = {
		root ?= title:e_the_iron_throne.holder
		OR = {
			scope:title = title:e_dorne
			scope:title = title:e_the_iron_islands
			scope:title = title:e_the_north
			scope:title = title:e_the_reach
			scope:title = title:e_the_riverlands
			scope:title = title:e_the_stormlands
			scope:title = title:e_the_vale
			scope:title = title:e_the_westerlands
			scope:title = title:e_blackwater_bay
		}
	}
	effect = {
		if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_dorne
			}
			destroy_title = title:e_dorne
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_dorne = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_the_iron_islands
			}
			destroy_title = title:e_the_iron_islands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_iron_islands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_the_north
			}
			destroy_title = title:e_the_north
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_north = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_the_reach
			}
			destroy_title = title:e_the_reach
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_reach = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_the_riverlands
			}
			destroy_title = title:e_the_riverlands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_riverlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_the_stormlands
			}
			destroy_title = title:e_the_stormlands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_stormlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_the_vale
			}
			destroy_title = title:e_the_vale
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_vale = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_the_westerlands
			}
			destroy_title = title:e_the_westerlands
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_westerlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
		else_if = {
			limit = {
				root ?= title:e_the_iron_throne.holder
				scope:title = title:e_blackwater_bay
			}
			destroy_title = title:e_blackwater_bay
			add_legitimacy = 75
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_the_crownlands = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			every_vassal = {
				remove_opinion = {
					target = title:e_the_iron_throne.holder
					modifier = destroyed_title
				}
			}
		}
	}
}

agot_on_title_gain_crownlands_inheritance = {
	trigger = {
		scope:title = { this = title:e_the_iron_throne }
		exists = scope:previous_holder
		OR = {
			scope:previous_holder = {
				OR = {
					has_title = title:k_the_crownlands
					has_title = title:d_kings_landing
					has_title = title:c_kings_landing
				}
			}
			AND = {
				scope:previous_holder.dynasty = dynasty:dynn_Targaryen
				root.dynasty = dynasty:dynn_Targaryen
				scope:previous_holder = {
					OR = {
						has_title = title:k_the_crownlands
						has_title = title:d_kings_landing
						has_title = title:c_kings_landing
						has_title = title:k_dragonstone
						has_title = title:d_dragonstone
						has_title = title:c_dragonstone
					}
				}
			}
		}
	}
	effect = {
		if = {
			limit = {
				scope:previous_holder = {
					OR = {
						has_title = title:k_the_crownlands
						has_title = title:d_kings_landing
						has_title = title:c_kings_landing
					}
				}
			}
			if = {
				limit = { scope:previous_holder = { has_title = title:k_the_crownlands } }
				create_title_and_vassal_change = {
					type = faction_demand
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:k_the_crownlands = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			if = {
				limit = { scope:previous_holder = { has_title = title:d_kings_landing } }
				create_title_and_vassal_change = {
					type = faction_demand
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:d_kings_landing = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			if = {
				limit = { scope:previous_holder = { has_title = title:c_kings_landing } }
				create_title_and_vassal_change = {
					type = faction_demand
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:c_kings_landing = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
		}
		if = {
			limit = {
				scope:previous_holder.dynasty = dynasty:dynn_Targaryen
				root.dynasty = dynasty:dynn_Targaryen
				scope:previous_holder = {
					OR = {
						has_title = title:k_dragonstone
						has_title = title:d_dragonstone
						has_title = title:c_dragonstone
					}
				}
			}
			if = {
				limit = { scope:previous_holder = { has_title = title:k_dragonstone } }
				create_title_and_vassal_change = {
					type = faction_demand
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:k_dragonstone = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			if = {
				limit = { scope:previous_holder = { has_title = title:d_dragonstone } }
				create_title_and_vassal_change = {
					type = faction_demand
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:d_dragonstone = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			if = {
				limit = { scope:previous_holder = { has_title = title:c_dragonstone } }
				create_title_and_vassal_change = {
					type = faction_demand
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:c_dragonstone = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
		}
	}
}

agot_secret_child_on_title_gain = {
	trigger = {
		exists = scope:previous_holder
		NOT = { root.house = scope:previous_holder.house }
		scope:title.tier > tier_county
		scope:previous_holder = {
			any_close_family_member = {
				agot_secret_character_eligible = yes
				house = scope:previous_holder.house
				mother ?= { NOT = { is_alive = yes } }
				father ?= { NOT = { is_alive = yes } }
			}
		}
	}
	effect = {
		if = {
			limit = {
				scope:previous_holder.house = {
					NOT = { any_house_member = { is_playable_character = yes } }
				}
			}
			scope:previous_holder = {
				random_close_family_member = {
					limit = {
						agot_secret_character_eligible = yes
						house = scope:previous_holder.house
						mother ?= { NOT = { is_alive = yes } }
						father ?= { NOT = { is_alive = yes } }
					}
					add_character_flag = from_title_gain
					agot_start_secret_identity_effect = yes
				}
			}
		}
	}
}

agot_on_rank_up = {
	effect = {
		#Court Language
		if = {
			limit = {
				has_dlc_feature = royal_court
				culture = culture:high_valyrian
				capital_county.title_province ?= {
					geographical_region = world_westeros
				}
				scope:title.tier < tier_kingdom
				primary_title.tier > tier_duchy
			}
			set_court_language = language_common
			if = {
				limit = { NOT = { knows_court_language_of = this } }
				learn_court_language_of = this
			}
		}
	}
}

agot_on_title_gain_house_name_generation = {
	effect = {
		if = {
			limit = {
					NOT = { exists = mother.dynasty }
					NOT = { exists = father.dynasty }
					NOR = {
						has_character_flag = canon_status_canon
						has_character_flag = canon_status_semicanon
						has_character_flag = canon_status_mentioned
						has_character_flag = keep_dynasty_name
					}
					NOT = { is_from_ruler_designer = yes }
					OR = {
						has_government = lp_feudal_government
						has_government = pirate_government
						has_government = administrative_government
						has_government = feudal_government
						has_government = nights_watch_government
						has_government = tribal_government
					}
					NOT = { has_character_flag = named_after_birthplace }
					NOT = { has_character_flag = named_randomly }
			}
			agot_set_new_house_name = yes
		}
	}
}

agot_on_title_gain_free_city_attached_titles = {
	trigger = {
		government_has_flag = government_is_free_city
		scope:title = {
			OR = {
				this = title:k_pentos
				this = title:k_myr
				this = title:k_lys
				this = title:k_tyrosh
				this = title:k_braavos
			}
		}
	}
	effect = {
		save_scope_as = new_holder
		if = {
			limit = {
				scope:title = title:k_pentos
			}
			if = {
				limit = {
					NOT = { has_title = title:d_pentos }
					any_vassal_or_below = {
						has_title = title:d_pentos
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = duchy_title_change
					add_claim_on_loss = no
				}
				title:d_pentos = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:duchy_title_change
					}
				}
				resolve_title_and_vassal_change = scope:duchy_title_change
			}
			if = {
				limit = {
					has_title = title:d_pentos
					title:d_pentos = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:d_pentos = {
					add_title_law = magisterial_attached_titles_law
				}
			}
			if = {
				limit = {
					NOT = { has_title = title:c_princes_quarter }
					any_vassal_or_below = {
						has_title = title:c_princes_quarter
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = county_title_change
					add_claim_on_loss = no
				}
				title:c_princes_quarter = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:county_title_change
					}
				}
				resolve_title_and_vassal_change = scope:county_title_change
			}
			if = {
				limit = {
					has_title = title:c_princes_quarter
					title:c_princes_quarter = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:c_princes_quarter = {
					add_title_law = magisterial_attached_titles_law
				}
			}
		}
		if = {
			limit = {
				scope:title = title:k_myr
			}
			if = {
				limit = {
					NOT = { has_title = title:d_myr }
					any_vassal_or_below = {
						has_title = title:d_myr
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = duchy_title_change
					add_claim_on_loss = no
				}
				title:d_myr = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:duchy_title_change
					}
				}
				resolve_title_and_vassal_change = scope:duchy_title_change
			}
			if = {
				limit = {
					has_title = title:d_myr
					title:d_myr = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:d_myr = {
					add_title_law = magisterial_attached_titles_law
				}
			}
			if = {
				limit = {
					NOT = { has_title = title:c_myr }
					any_vassal_or_below = {
						has_title = title:c_myr
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = county_title_change
					add_claim_on_loss = no
				}
				title:c_myr = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:county_title_change
					}
				}
				resolve_title_and_vassal_change = scope:county_title_change
			}
			if = {
				limit = {
					has_title = title:c_myr
					title:c_myr = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:c_myr = {
					add_title_law = magisterial_attached_titles_law
				}
			}
		}
		if = {
			limit = {
				scope:title = title:k_lys
			}
			if = {
				limit = {
					NOT = { has_title = title:d_lys }
					any_vassal_or_below = {
						has_title = title:d_lys
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = duchy_title_change
					add_claim_on_loss = no
				}
				title:d_lys = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:duchy_title_change
					}
				}
				resolve_title_and_vassal_change = scope:duchy_title_change
			}
			if = {
				limit = {
					has_title = title:d_lys
					title:d_lys = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:d_lys = {
					add_title_law = magisterial_attached_titles_law
				}
			}
			if = {
				limit = {
					NOT = { has_title = title:c_lys }
					any_vassal_or_below = {
						has_title = title:c_lys
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = county_title_change
					add_claim_on_loss = no
				}
				title:c_lys = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:county_title_change
					}
				}
				resolve_title_and_vassal_change = scope:county_title_change
			}
			if = {
				limit = {
					has_title = title:c_lys
					title:c_lys = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:c_lys = {
					add_title_law = magisterial_attached_titles_law
				}
			}
		}
		if = {
			limit = {
				scope:title = title:k_tyrosh
			}
			if = {
				limit = {
					NOT = { has_title = title:d_tyrosh }
					any_vassal_or_below = {
						has_title = title:d_tyrosh
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = duchy_title_change
					add_claim_on_loss = no
				}
				title:d_tyrosh = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:duchy_title_change
					}
				}
				resolve_title_and_vassal_change = scope:duchy_title_change
			}
			if = {
				limit = {
					has_title = title:d_tyrosh
					title:d_tyrosh = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:d_tyrosh = {
					add_title_law = magisterial_attached_titles_law
				}
			}
			if = {
				limit = {
					NOT = { has_title = title:c_tyrosh }
					any_vassal_or_below = {
						has_title = title:c_tyrosh
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = county_title_change
					add_claim_on_loss = no
				}
				title:c_tyrosh = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:county_title_change
					}
				}
				resolve_title_and_vassal_change = scope:county_title_change
			}
			if = {
				limit = {
					has_title = title:c_tyrosh
					title:c_tyrosh = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:c_tyrosh = {
					add_title_law = magisterial_attached_titles_law
				}
			}
		}
		if = {
			limit = {
				scope:title = title:k_braavos
			}
			if = {
				limit = {
					NOT = { has_title = title:d_braavos }
					any_vassal_or_below = {
						has_title = title:d_braavos
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = duchy_title_change
					add_claim_on_loss = no
				}
				title:d_braavos = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:duchy_title_change
					}
				}
				resolve_title_and_vassal_change = scope:duchy_title_change
			}
			if = {
				limit = {
					has_title = title:d_braavos
					title:d_braavos = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:d_braavos = {
					add_title_law = magisterial_attached_titles_law
				}
			}
			if = {
				limit = {
					NOT = { has_title = title:c_braavos }
					any_vassal_or_below = {
						has_title = title:c_braavos
					}
				}
				create_title_and_vassal_change = {
					type = election
					save_scope_as = county_title_change
					add_claim_on_loss = no
				}
				title:c_braavos = {
					change_title_holder = {
						holder = scope:new_holder
						change = scope:county_title_change
					}
				}
				resolve_title_and_vassal_change = scope:county_title_change
			}
			if = {
				limit = {
					has_title = title:c_braavos
					title:c_braavos = {
						NOT = { has_title_law = magisterial_attached_titles_law }
					}
				}
				title:c_braavos = {
					add_title_law = magisterial_attached_titles_law
				}
			}
		}
	}
}

### Mega Wars
# Upon title change story cycle should by given to new holder; also changes pre_war_liege value
agot_on_title_gain_mega_wars_action = {
	trigger = {
		OR = {
			AND = { # trigger for on_title_gain
				exists = scope:previous_holder
				scope:previous_holder = { save_temporary_scope_as = old_holder }
				exists = scope:title
				scope:old_holder = {
					OR = {
						mw_0101_check_01_trigger = yes # Check 1: old_holder has story_agot_mw_rebel
						mw_0101_check_02_trigger = yes # Check 2: old_holder has story_agot_mw_crown
						mw_0101_check_03_trigger = yes # Check 3: old_holder is loyalist
						mw_0101_check_04_trigger = yes # Check 4: old_holder is neutral
						mw_0101_check_05_trigger = yes # Check 5: old_holder is rebel supporter
						mw_0101_check_06_trigger = yes # Check 6: old_holder is rebel leader
						mw_0101_check_07_trigger = yes # Check 7: pre_war_liege values
					}
				}
			}
		}
	}
	effect = {
		if = { # --> triggered by on_title_gain
			limit = { exists = scope:previous_holder }

			scope:previous_holder = { save_scope_as = old_holder }
			root = { save_scope_as = new_holder }
		}
		else_if = { # --> triggered by on_title_destroy; caution, there is no new_holder!
			limit = { exists = scope:landed_title }

			root = { save_scope_as = old_holder }
		}

		scope:old_holder = {
			if = { # Check 1: has crown story cycle
				limit = { mw_0101_check_01_trigger = yes }

				random_owned_story = {
					limit = { story_type = story_agot_mw_crown }

					save_scope_as = mw_crown_story
					set_variable = { name = mw_former_story_owner value = scope:old_holder }
					make_story_owner = scope:new_holder

					#every_in_list = { # disabled since we no longer use mw_target to track story links but mw_crown_story_var instead
					#	variable = mw_rebel_leader_list

					#	random_owned_story = {
					#		limit = {
					#			story_type = story_agot_mw_rebel
					#			var:mw_crown_story_var ?= scope:mw_crown_story
					#		}

					#		set_variable = { name = mw_target value = scope:new_holder }
					#	}
					#}
				}
			}
			if = { # Check 2: has rebel story cycle
				limit = { mw_0101_check_02_trigger = yes }

				every_owned_story = {
					limit = { story_type = story_agot_mw_rebel }

					if = {
						limit = { # if new_holder is not in mw_loyalist_list and old_holder is not in mw_rebel_leader_list; make new_holder the mw_new_rebel_leader
							var:mw_crown_story_var ?= {
								NOT = {
									is_target_in_variable_list = { name = mw_loyalist_list target = scope:new_holder }
								}
								is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:old_holder }
							}
						}
						scope:new_holder = { save_scope_as = mw_new_rebel_leader }
					}
					else = { # else take one from the rebel supporter list
						random_in_list = {
							variable = mw_rebel_supporter_list

							weight = {
								base = 1

								modifier = {
									add = 3000
									primary_title = { tier = tier_kingdom }
								}
								modifier = {
									add = 2000
									primary_title = { tier = tier_duchy }
								}
								modifier = {
									add = 1000
									primary_title = { tier = tier_county }
								}
							}

							save_scope_as = mw_new_rebel_leader
						}
					}

					var:mw_crown_story_var ?= {
						add_to_variable_list = { name = mw_rebel_leader_list target = scope:mw_new_rebel_leader }
						remove_list_variable = { name = mw_rebel_leader_list target = scope:old_holder }
					}

					make_story_owner = scope:mw_new_rebel_leader
				}
			}
			if = { # Check 3: if new_holder is in loyalist list, add new_holder
				limit = { mw_0101_check_03_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_crown
							OR = {
								is_target_in_variable_list = { name = mw_loyalist_list target = scope:old_holder }
								story_owner = scope:old_holder
							}
							NOR = {
								is_target_in_variable_list = { name = mw_loyalist_list target = scope:new_holder }
								story_owner = scope:new_holder
							}
						}
						NOT = { # Don't add to loyalist list if old_holder just won a mw and has both mw story cycles
							any_owned_story = {
								story_type = story_agot_mw_rebel
								var:mw_crown_story_var ?= prev
								var:mw_outcome = flag:rebels_won
							}
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_loyalist_list target = scope:old_holder }
							NOT = { is_target_in_variable_list = { name = mw_loyalist_list target = scope:new_holder } }
						}
						add_to_variable_list = { name = mw_loyalist_list target = scope:new_holder }
						if = {
							limit = {
								scope:old_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_loyalist_list target = scope:old_holder }
						}
					}
				}
			}
			if = { # Check 4: if new_holder is in neutral list, add new_holder
				limit = { mw_0101_check_04_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_neutral_list target = scope:old_holder }
							NOT = { is_target_in_variable_list = { name = mw_neutral_list target = scope:new_holder } }
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_neutral_list target = scope:old_holder }
							NOT = { is_target_in_variable_list = { name = mw_neutral_list target = scope:new_holder } }
						}
						add_to_variable_list = { name = mw_neutral_list target = scope:new_holder }
						if = {
							limit = {
								scope:old_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_neutral_list target = scope:old_holder }
						}
					}
				}
			}
			if = { # Check 5: if new_holder is in rebel supporter list, add new_holder
				limit = { mw_0101_check_05_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_rebel
							is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:old_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:new_holder } }
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_rebel
							is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:old_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:new_holder } }
						}
						add_to_variable_list = { name = mw_rebel_supporter_list target = scope:new_holder }
						if = {
							limit = {
								scope:old_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_rebel_supporter_list target = scope:old_holder }
						}
					}
				}
			}
			if = { # Check 6: if previous holder is rebel leader, add new_holder to neutral list
				limit = { mw_0101_check_06_trigger = yes }

				every_ruler = {
					limit = {
						any_owned_story = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:old_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:new_holder } }
						}
					}
					random_owned_story = {
						limit = {
							story_type = story_agot_mw_crown
							is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:old_holder }
							NOT = { is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:new_holder } }
						}
						add_to_variable_list = { name = mw_neutral_list target = scope:new_holder }
						if = {
							limit = {
								scope:old_holder = {
									OR = {
										is_landed = no
										highest_held_title_tier = tier_barony
									}
								}
							}
							remove_list_variable = { name = mw_rebel_leader_list target = scope:old_holder }
						}
					}
				}
			}
			if = { # Check 7: handle new pre_war_liege values
				limit = { mw_0101_check_07_trigger = yes }

				if = {
					limit = {
						exists = scope:old_holder.var:pre_war_liege
						NOT = { scope:new_holder = scope:old_holder.var:pre_war_liege }
						scope:new_holder = {
							NOR = {
								liege = scope:old_holder
								has_character_flag = mw_changed_pre_war_liege
							}
						}
					}
					scope:new_holder = {
						set_variable = { name = pre_war_liege value = scope:old_holder.var:pre_war_liege }
						add_character_flag = { flag = mw_changed_pre_war_liege days = 1 }
					}
				}
				every_ruler = {
					limit = {
						save_temporary_scope_as = t_scope
						exists = var:pre_war_liege
						var:pre_war_liege = scope:old_holder
						trigger_if = { # this should the variable to change if you are e. g. e_iron_isles and fight for independence; else the war invalidates
							limit = {
								scope:new_holder = {
									any_owned_story = {
										story_type = story_agot_mw_crown
										NOT = { is_target_in_variable_list = { name = mw_rebel_leader_list target = scope:t_scope } }
									}
								}
							}

							primary_title.tier < scope:title.tier
						}
						trigger_if = {
							limit = {
								exists = scope:old_holder.primary_title.tier
								scope:old_holder = { is_alive = yes }
							}
							scope:old_holder.primary_title.tier < scope:title.tier
						}
						#scope:old_holder = { is_landed = no } # AGOT TODO I don't remember why I added this line; anyway, it causes issues and breaking mws!
					}
					if = {
						limit = {
							NOT = { this = scope:new_holder }
						}
						set_variable = { name = pre_war_liege value = scope:new_holder }
					}
					else = {
						remove_variable = pre_war_liege
					}
				}
				if = { # To prevent crown from becoming independent if mw ends
					limit = {
						is_landed = yes
						primary_title.tier < scope:title.tier
					}
					agot_mw_change_vassalage = { LIEGE = scope:new_holder }
				}
			}
		}

		scope:new_holder = { # Check 7: empire tier and has; TRIGGER NO ADDED ABOVE!
			if = {
				limit = {
					#always = no # might currently lead to conflicts if you are in an independence war and proclaimed yourself king
					has_title = title:e_the_iron_throne
					highest_held_title_tier = tier_empire
					has_variable = pre_war_liege
				}
				remove_variable = pre_war_liege
			}
		}
	}
}

agot_title_destroyed_mega_war_on_action = {
	trigger = {
		OR = {
			any_ruler = {
				save_temporary_scope_as = t_scope
				var:pre_war_liege ?= root
				highest_held_title_tier >= root.highest_held_title_tier
				root = {
					any_held_title = {
						tier = root.highest_held_title_tier
						NOT = { scope:t_scope.capital_county = { target_is_de_jure_liege_or_above = root.primary_title } }
					}
				}
				is_independent_ruler = yes
			}
			AND = {
				agot_mw_crown_trigger = yes
				NOT = {
					any_held_title = {
						NOT = { this = scope:landed_title }
						tier = scope:landed_title.tier
					}
				}
			}
		}
	}
	effect = {
		# If a title was destroyed and its former ruler is deranked and is pre-war-liege to rulers no of same rank.
		every_ruler = {
			limit = {
				save_temporary_scope_as = t_scope
				var:pre_war_liege ?= root
				highest_held_title_tier >= root.highest_held_title_tier
				root = {
					any_held_title = {
						tier = root.highest_held_title_tier
						NOT = { scope:t_scope.capital_county = { target_is_de_jure_liege_or_above = root.primary_title } }
					}
				}
				is_independent_ruler = yes
			}

			save_scope_as = t_ruler

			if = { # first try to make the de_jure_liege liege
				limit = {
					capital_county = {
						any_this_title_or_de_jure_above = {
							holder.highest_held_title_tier > scope:t_ruler.highest_held_title_tier
							exists = this
						}
					}
				}
				capital_county = {
					ordered_this_title_or_de_jure_above = {
						limit = { holder.highest_held_title_tier > scope:t_ruler.highest_held_title_tier }

						order_by = {
							if = {
								limit = { tier = tier_duchy }
								add = 30
							}
							if = {
								limit = { tier = tier_kingdom }
								add = 20
							}
							if = {
								limit = { tier = tier_empire }
								add = 10
							}
						}

						scope:t_ruler = { set_variable = { name = pre_war_liege value = prev.holder } }
					}
				}
			}
			else_if = { # else try to find the story owners and make them new pre_war_liege
				limit = {
					scope:t_ruler.highest_held_title_tier < tier_kingdom # block this for kingdom titles in general
					any_ruler = {
						any_owned_story = {
							OR = {
								AND = { # trigger for crown side
									story_type = story_agot_mw_crown
									OR = {
										is_target_in_variable_list = { name = mw_loyalist_list target = scope:t_ruler }
									}
								}
								AND = { # trigger for neutrals
									story_type = story_agot_mw_crown
									OR = {
										is_target_in_variable_list = { name = mw_neutral_list target = scope:t_ruler }
									}
								}
								AND = { # trigger for rebel side
									story_type = story_agot_mw_rebel
									OR = {
										is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:t_ruler }
										var:mw_crown_story_var.story_owner ?= scope:old_holder
									}
								}
							}
						}
					}
				}

				random_ruler = {
					limit = {
						highest_held_title_tier > scope:t_ruler.highest_held_title_tier
						any_owned_story = {
							OR = {
								AND = { # trigger for crown side
									story_type = story_agot_mw_crown
									OR = {
										is_target_in_variable_list = { name = mw_loyalist_list target = scope:t_ruler }
									}
								}
								AND = { # trigger for neutrals
									story_type = story_agot_mw_crown
									OR = {
										is_target_in_variable_list = { name = mw_neutral_list target = scope:t_ruler }
									}
								}
								AND = { # trigger for rebel side
									story_type = story_agot_mw_rebel
									OR = {
										is_target_in_variable_list = { name = mw_rebel_supporter_list target = scope:t_ruler }
										var:mw_crown_story_var.story_owner ?= scope:old_holder
									}
								}
							}
						}
					}
					scope:t_ruler = { set_variable = { name = pre_war_liege value = prev } }
				}
			}
			else = { # else, after we did not find a new liege, remove the variables to prevent buggy behaviour
				remove_variable = pre_war_liege
				agot_mw_clear_vassal_contract_variables_effect = yes
			}
		}
		####

		if = {
			limit = {
				agot_mw_crown_trigger = yes
				NOT = {
					any_held_title = {
						NOT = { this = scope:landed_title }
						tier = scope:landed_title.tier
					}
				}
			}

			random_owned_story = {
				limit = { story_type = story_agot_mw_crown }

				save_scope_as = mw_crown_story
			}
			every_held_title = { # AGOT TODO what is this? I am saving a scope while fetching a bunch of entries? That doesn't seem to make sense. Turn it into random_?
				limit = {
					NOT = { this = scope:landed_title }
					tier < scope:landed_title.tier
				}
				save_scope_as = root_titles_scope

				scope:mw_crown_story = {
					every_in_list = {
						variable = mw_rebel_leader_list

						primary_title = { save_scope_as = rebel_leader_list_title_scope }

						if = {
							limit = {
								primary_title.tier >= scope:root_titles_scope.tier
							}

							add_to_list = remove_pre_war_liege
							add_to_list = stories_to_end_list
						}

						every_in_list = {
							variable = mw_rebel_supporter_list

							if = {
								limit = { primary_title.tier >= scope:root_titles_scope.tier }

								add_to_list = remove_pre_war_liege
							}
						}
					}
				}
			}

			every_in_list = {
				list = remove_pre_war_liege

				remove_variable = pre_war_liege
			}

			every_in_list = {
				list = stories_to_end_list

				every_owned_story = {
					limit = {
						story_type = story_agot_mw_rebel
						var:mw_crown_story_var ?= scope:mw_crown_story
						NOT = { story_owner = { is_at_war_with = root } } # Else we invalidate ongoing conflicts with crown
					}

					if = {
						limit = { NOT = { var:mw_war_cb ?= flag:dissolution_war } }
						set_variable = {
							name = mw_outcome
							value = flag:invalidated
						}
					}
					set_variable = {
						name = mw_status
						value = flag:ending
					}
				}
			}
		}
	}
}